{ 
    "Common":{
        "getBrokerCode": " SELECT  BrokerCd FROM dbo.Purchase WITH(NOLOCK) WHERE Optnum = @intOptNum AND OfferNum = @intOfferNum and ISNULL(BrokerCd,0) > 0 GROUP BY BrokerCd ",
        "getBrokerCode2":" SELECT BrokerCd FROM dbo.GrantEvent WITH (NOLOCK) WHERE GrantNum = @intGrantNum AND BrokerCd IS NOT NULL GROUP BY BrokerCd ",
        "getBrokerCode3": " SELECT BrokerCd FROM dbo.GrantEvent ge WITH (NOLOCK) INNER JOIN dbo.[Grant] g WITH (NOLOCK) ON ge.GrantNum = g.GrantNum INNER JOIN dbo.[GrantGroup] gg WITH (NOLOCK) ON g.GrantGroupID = gg.GrantGroupId AND gg.HoldingsTypeId = 4 WHERE g.OptNum = @intOptNum AND BrokerCd IS NOT NULL GROUP BY BrokerCd "
    },
    
    "Users":{
        "putGdprAgree" : "DECLARE @dtmtoday DATETIME = GETDATE() ,@eId VARCHAR(50) = @enterpriseID IF NOT EXISTS (SELECT EnterpriseId FROM dbo.GdprAgree WITH (NOLOCK) WHERE EnterpriseID = @eId) BEGIN INSERT INTO dbo.GdprAgree (EnterpriseId,GdprFlag,LogDate) VALUES (@eId,@gdprflag,@dtmToday) END ELSE BEGIN UPDATE dbo.GdprAgree SET GdprFlag = @gdprflag,LogDate = @dtmToday WHERE EnterpriseId = @eId END "
    },
    "Dashboard":{
        "getDisplayCards": "SELECT top 1 [FounderDisplayInd],[RSUDisplayInd],[EsppDisplayInd],[VeipDisplayInd],[OptionsDisplayInd],[EorDisplayInd],[EorTotalShares],[EorShares], [EorShareExcessShortFall],[EorResourceIdExplanation],[PeapDisplayInd],[PerfRewardInd],[PerfSummaryDisplayInd],[IsSeniorMD], [GrantAlertDisplayInd], [ESPPEnrollmentDisplayInd],[ESPPCurrentOPDisplayInd],[VeipEnrollmentDisplayInd],[VeipCurrentOPDisplayInd],[DivSummaryDisplayInd],[PerfGrantValueExceed],[LocalCurrency],[KeyExecToggleInd] from [GetDashboardDisplayCard_vw] where OptNum = @intOptNum"
    },
    "HighlightsData":{
        "getHighlightsData":"SELECT TOP 3 [Key],[Header],[Text],YEAR([RefDate]) [Year],DATENAME(month, [RefDate]) [Month]from [GetHighlightsDetails_vw] WITH (NOLOCK) WHERE OptNum = @intOptNum AND [RefDate] > (SELECT CONVERT(DATE, ((DATEADD(month, -@intMonthFilter , GETDATE()))), 101)) ORDER BY refdate DESC SELECT [Key],[Header],[Text],YEAR([RefDate]) [Year],DATENAME(month, [RefDate]) [Month]from [GetHighlightsDetails_vw] WITH (NOLOCK) WHERE OptNum = @intOptNum AND [RefDate] > (SELECT CONVERT(DATE, ((DATEADD(month, -@intMonthFilter , GETDATE()))), 101)) ORDER BY refdate DESC"
    },
    
    "RecordLogin":{
        "recordLogin": "DECLARE @dtmToday datetime DECLARE @intError INT DECLARE @chvErrMsg varchar(300) DECLARE @chvPersonnelNbr VARCHAR(10) = @personnelNbr DECLARE @chvEnterpriseID VARCHAR(50) = @enterpriseID SET @dtmToday = GETDATE() IF @chvPersonnelNbr IS NOT NULL BEGIN INSERT INTO Web_Tbl_EmplLogin_Hist VALUES(@chvPersonnelNbr,@chvEnterpriseID,@dtmToday) SET @intError = @@error IF  @intError <> 0 BEGIN SELECT @chvErrMsg = 'Failed to insert record in Tbl_EmplLogin_Hist' GOTO EndofExecution END END EndofExecution: IF @intError = 0 BEGIN SELECT 0 END ELSE BEGIN SELECT 2 END"
    },

    "EORPage":{
        "getEORDetails" :" SELECT  ROUND(EORBase,0) [BaseCompensationUSD],ROUND(EquityCoefficient,4) [ExchangeRate],LORMultiplier [BaseCompensationMultiple],FMV [FairMarketValue],EquityOwnershipReqt [EquityOwnerRequirement],RemainingEquity [CurrentShareHoldings], NSRM, CONVERT(VARCHAR,GracePeriodEndDt,106) [GracePeriodExpirationDate],Opt_Num, CONVERT (DECIMAL(20,4),EORBase) * CONVERT(DECIMAL(20,4),EquityCoefficient) [BaseCompensationLocalCurrency],RemainingEquity - ISNULL(EquityOwnershipReqt,0) [ShareExcessShortFall],CASE WHEN RemainingEquity - ISNULL(EquityOwnershipReqt,0) >=0 THEN 1 WHEN (RemainingEquity - ISNULL(EquityOwnershipReqt,0) < 0) AND GETDATE() <= GracePeriodEndDt THEN 2 WHEN (RemainingEquity - ISNULL(EquityOwnershipReqt,0) < 0) AND GETDATE() > GracePeriodEndDt THEN 3  ELSE 1 END [EorResourceIdExplanation] FROM  dbo.Web_Tbl_Eor_Details_Lkup WITH (NOLOCK) WHERE Opt_Num ="   
    },
    
    "KeyExecToggle":{
        "getKeyExecToggle1": "SELECT Code,LEFT(Decode,CHARINDEX('~',Decode)-1) [OI],RIGHT(Decode, CHARINDEX('~' , Decode)-1) [TSR] FROM dbo.codedetail WITH (NOLOCK) WHERE CategoryNbr = 26 ",
        "getKeyExecToggle2": "AND StatusInd = 'A'",
        "getKeyExecToggle3": " UNION SELECT 'KeyExecPlanNum' ,Decode,'0' FROM dbo.CodeDetail cd WITH(NOLOCK) WHERE CategoryNbr = 27 AND StatusInd = 'A'"
    },
    
      
    "PerformanceRewardContent":{
        "getPerformanceReward": "SELECT pr.PerfGrantYr,pr.DataFY,pr.GrantCountry,pr.CurrencyLoc,pr.CareerLevel,[PerfGrantPerc],[CurrBasePay],pr.BasePayDate,[TargetBonusFactor],[CompanyPerformanceFactor],[PerfGrantValueExceed],[PerfGrantValueAbove],[xValue],[isOldView],[isSeniorManagingDirector],OptNum FROM dbo.GetPsuPerformanceReward_vw pr WITH (NOLOCK) WHERE OptNum = @OptNum"
    },

    "GetMarketQuoteFromSQL":{
        "getData":"SELECT TOP 1 * FROM [dbo].[MarketQuote] WITH(NOLOCK) ORDER BY [Timestamp] desc"
    },

    "ExchangeRate":{
        "GetCurrencyCode":{
            "getCurrencyCode":"SELECT TOP 1 Exch_Rt_Eff_Dt, Cnvt_From_Curr_Cd, Cnvt_To_Curr_Cd, Exch_Rt, Recpr_Exch_Rt, Recd_Dt FROM dbo.Tbl_Forex with(nolock) WHERE Cnvt_To_Curr_Cd =",
            "orderby": " ORDER BY Recd_Dt DESC"
        },

        "GetAllCurrencyCodes":{
            "getAllCurrencyCodes":"SELECT CNVT_TO_CURR_CD,EXCH_RT,Latest_RECD_DT FROM dbo.[GetExchangeRate_vw] WITH(NOLOCK)"
        },

        "UpdateCurrency":{
            "updateCurrency1":"UPDATE dbo.[user] SET CurrencyPreferenceCd = ",
            "updateCurrency2":" ,HideOutstandingAwardsInd = ",
            "updateCurrency3":" ,UpdateDt = ",
            "updateCurrency4":" WHERE OptNum ="
    }
}, 

    "UpdateMarketQuote":{
        "UpdateMarketQuote1":" UPDATE [dbo].[MarketQuote] SET [Status] ='", 
        "UpdateMarketQuote2":"',Name='",
        "UpdateMarketQuote3":"',Symbol='",
        "UpdateMarketQuote4":"',LastPrice= ",
        "UpdateMarketQuote5":" ,Change= ",
        "UpdateMarketQuote6":" ,ChangePercent= ",
        "UpdateMarketQuote7":" ,[Timestamp]= ",
		"UpdateMarketQuote8":" ,MSDate= ",
		"UpdateMarketQuote9":" ,MarketCap= ",
		"UpdateMarketQuote10":" ,Volume= ",
		"UpdateMarketQuote11":" ,ChangeYTD= ",
		"UpdateMarketQuote12":" ,ChangePercentYTD= ",
		"UpdateMarketQuote13":" ,High= ",
		"UpdateMarketQuote14":" ,Low= ",
		"UpdateMarketQuote15":" ,[Open]= "
      
       
    },

    "UserDetailsByOptnum":{
        "getUserDetailsByOptnum1": "SELECT TOP 1 u.OptNum ,u.EnterpriseId ,u.LastLoggedin ,u.LoginCount ,u.[Address],u.ParticipantNumber ,u.IsAdmin,u.IsAdminCanTransactInd ,u.FirstName ,u.MiddleInitial ,u.LastName,u.PersonnelNumber,u.PeopleKey ,u.EmployeeStatus ,CONVERT(VARCHAR,u.BirthDate,106) [BirthDate] ,CONVERT(VARCHAR,u.HireDate,106) [HireDate] ,CONVERT(VARCHAR,u.LeaveTermDate,106) [LeaveTermDate]  ,u.ProfileAddress ,u.ContactNumber  ,u.CurrencyCd ,u.JobCd  ,u.ContractorEnterpriseId ,u.isBODInd,u.HasGrantInd,u.HasPurchaseInd ,u.EsppEligibleInd ,u.EsppTaxElectionEligibleInd,u.VeipCurrentOfferingEligibleInd,u.VeipNextOfferingEligibleInd,u.VeipMatchingGrantEligibleInd,u.AdditionalEsppPaperRequirementInd,u.AdditionalVeipPaperRequirementInd ,u.HideOutstandingAwardsInd,u.EmailAddress ,CONVERT(VARCHAR,u.TermDate,106) [TermDate],u.CountryName,gd.GdprFlag,gd.LogDate [GdprLogDate], u.TransfereeTypeCd [TransfereeTypeCd] ,pn.PreferredFirstName ,pn.PreferredLastName ,pn.PreferredMiddleName FROM [dbo].[UserProfileByOptNum_vw] u WITH (NOLOCK) LEFT JOIN [dbo].[GdprAgree] gd WITH (NOLOCK) ON u.EnterpriseId = gd.EnterpriseId  LEFT JOIN [dbo].[Web_Tbl_People_PreferredNm_Trans] pn WITH (NOLOCK) ON u.PersonnelNumber = pn.Optionee_ID WHERE OptNum = @intOptNum" 
    },

    "LogicalGrpDetail":{
        "getLogicalGrpDetail1": "SELECT GroupingID, GroupingValue FROM dbo.LogicalGroupingDetail WITH(NOLOCK) where GroupingID = @GroupingID"
    },
    
    "VEIPPage":{
        "getTransactionDetails" : "SELECT ewt.ContributionPercent ,ewt.CyNum, vrt.Default_Elect ,ewt.EnrollStatus, vet.Trans_Type [RecentEnrollment] , ewt.Manual_Election , ewt.OptNum , CONVERT(VARCHAR,vrt.Release_Dt,106) [Release_Dt], vrt.Release_Percentage , CONVERT(VARCHAR,ewt.TransactionDt,106) [TransactionDt] , ewt.Trans_Num , ewt.Updated_By FROM dbo.GetVeipEnrollWithdrawTrans_vw ewt WITH (NOLOCK) LEFT JOIN dbo.GetVeipEnrollTrans_vw vet WITH (NOLOCK) ON vet.OptNum=ewt.OptNum AND vet.CyNum = ewt.CyNum LEFT JOIN dbo.Web_Tbl_VeipRsuRlsSched_Trans vrt WITH (NOLOCK) ON ewt.Trans_Num = vrt.Trans_Num WHERE ewt.OptNum = @intOptNum AND ewt.CyNum = @intCyNum",
        "getDefaultEligibility" : "SELECT ISNULL(VEIP_DEFAULT_TYPE,1) [VEIP_DEFAULT_TYPE] FROM dbo.Web_Tbl_VeipEligibility_Lkup WHERE Opt_Num = @intOptNum",
        "insertVEIPTransactionDetails" : "DECLARE @UpdatedBy VARCHAR(10) DECLARE @ContPer INT DECLARE @ManualElection INT DECLARE @intOfferNum INT  DECLARE @Transaction_Dt DATETIME DECLARE @Release_Dt DATETIME DECLARE @cyNum INT DECLARE @intMaxTransNum INT DECLARE @getTransType INT DECLARE @contrib INT DECLARE @intOptNum INT DECLARE @OptNum2 INT DECLARE @TransType INT SET @ManualElection = CAST(@ManualElection2 AS INT) SET @ContPer  = CAST(@ContribPerc AS INT) SET @UpdatedBy =  @UpdatedBy2 SET @Transaction_Dt = GETDATE() SET @Release_Dt = @Transaction_Dt SET @intOfferNum = @OfferNum SET @intOptNum = @optNum SET @OptNum2 = @optNum SET @TransType = @Transtype2 SET @cyNum = (SELECT CyNum FROM dbo.Offering WITH (NOLOCK) WHERE offernum  = @intOfferNum) IF EXISTS(SELECT 1 FROM dbo.Offering WITH (NOLOCK) WHERE OfferNum = @intOfferNum AND GETDATE() BETWEEN EnrollmentStartDt and EnrollmentEndDt) AND (@TransType = 1)BEGIN SET @intMaxTransNum = (SELECT MAX(Trans_Num) FROM dbo.Web_Tbl_Veip_Trans WITH (NOLOCK) WHERE Opt_Num = @OptNum2) IF @intMaxTransNum IS NULL BEGIN INSERT INTO dbo.Web_Tbl_Veip_Trans (Cy_Num,Opt_Num,Trans_Type,Transaction_Dt,Contrib_Percentage,Manual_Election,Updated_By) SELECT o.CyNum,@OptNum2 ,b.OldValue ,@Transaction_Dt,CAST(@ContPer AS INT),@ManualElection ,@UpdatedBy FROM dbo.Offering o WITH (NOLOCK) INNER JOIN dbo.Web_Tbl_VeipEligibility_Lkup ve WITH (NOLOCK) ON ve.Cy_Num = o.Cynum AND ve.Opt_Num = @intOptNum INNER JOIN Mapping b WITH (NOLOCK) ON b.NewValue = @TransType WHERE OfferNum = @intOfferNum AND b.Category = 'VeipEnrollmentStatus' SET @intMaxTransNum = (SELECT MAX(Trans_Num) FROM dbo.Web_Tbl_Veip_Trans WITH (NOLOCK) WHERE Opt_Num = @OptNum2)  INSERT INTO Web_Tbl_VeipRsuRlsSched_Trans(Trans_Num,Release_Percentage ,Release_Dt ,Default_Elect) SELECT TOP 1 Trans_Num ,100 ,@Release_Dt ,'Y' FROM Web_Tbl_Veip_Trans WHERE Opt_Num = @intOptNum AND Cy_Num = @cyNum ORDER BY TRANSACTION_DT DESC SELECT 0 END ELSE BEGIN INSERT INTO dbo.Web_Tbl_Veip_Trans (Cy_Num,Opt_Num,Trans_Type,Transaction_Dt,Contrib_Percentage,Manual_Election,Updated_By) SELECT o.CyNum,@OptNum2 ,b.OldValue ,@Transaction_Dt,CAST(@ContPer AS INT),@ManualElection ,@UpdatedBy FROM dbo.Offering o WITH (NOLOCK) INNER JOIN dbo.Web_Tbl_VeipEligibility_Lkup ve WITH (NOLOCK) ON ve.Cy_Num = o.Cynum AND ve.Opt_Num = @intOptNum INNER JOIN Mapping b WITH (NOLOCK) ON b.NewValue = @TransType WHERE OfferNum = @intOfferNum AND b.Category = 'VeipEnrollmentStatus' SET @intMaxTransNum = (SELECT MAX(Trans_Num) FROM dbo.Web_Tbl_Veip_Trans WITH (NOLOCK) WHERE Opt_Num = @OptNum2)  INSERT INTO Web_Tbl_VeipRsuRlsSched_Trans(Trans_Num,Release_Percentage ,Release_Dt ,Default_Elect) VALUES(@intMaxTransNum, 100, @Release_Dt, 'Y') SELECT 0 END END ELSE IF EXISTS(SELECT 1 FROM dbo.Offering WITH (NOLOCK) WHERE OfferNum = @intOfferNum AND GETDATE() BETWEEN DATEADD(dd,1,CONVERT(DATE,EnrollmentStartDt)) AND PeriodEndDt) AND (@TransType = 8) BEGIN SELECT TOP 1 @getTransType = Trans_Type ,@contrib = Contrib_Percentage FROM dbo.Web_TbL_veip_trans WITH (NOLOCK) WHERE cy_num = @cyNum AND opt_num = @intOptNum ORDER BY TRANSACTION_DT DESC IF @getTransType IS NOT NULL AND @TransType = 8 BEGIN IF @getTransType = 5 BEGIN SELECT 'INVALID TRANSACTION' END ELSE  IF @getTransType = 1 OR @getTransType = 3 OR @getTransType = 4 BEGIN INSERT INTO dbo.Web_Tbl_Veip_Trans (Cy_Num,Opt_Num,Trans_Type,Transaction_Dt,Contrib_Percentage,Manual_Election,Updated_By) SELECT o.CyNum, @OptNum2 ,b.OldValue ,@Transaction_Dt,CAST(@ContPer AS INT),@ManualElection ,@UpdatedBy FROM dbo.Offering o WITH (NOLOCK) INNER JOIN dbo.Web_Tbl_VeipEligibility_Lkup ve WITH (NOLOCK) ON ve.Cy_Num = o.Cynum AND ve.Opt_Num = @intOptNum INNER JOIN Mapping b WITH (NOLOCK) ON b.NewValue = @TransType WHERE OfferNum = @intOfferNum AND b.Category = 'VeipEnrollmentStatus' SET @intMaxTransNum = (SELECT MAX(Trans_Num) FROM dbo.Web_Tbl_Veip_Trans WITH (NOLOCK) WHERE Opt_Num = @OptNum2) INSERT INTO Web_Tbl_VeipRsuRlsSched_Trans(Trans_Num,Release_Percentage ,Release_Dt ,Default_Elect) VALUES(@intMaxTransNum, 100, @Release_Dt, 'Y') SELECT 0 END ELSE BEGIN SELECT 'INVALID TRANSACTION' END END ELSE BEGIN SELECT 'INVALID TRANSACTION' END END ELSE BEGIN SELECT 'INVALID TRANSACTION' END ",
        "getOfferingDetails" :  "SELECT OfferingFlag,CyNum,OptNum,PeriodStartDt,PeriodEndDt,EnrollmentStartDt,EnrollmentEndDt,EnrollStatus,ContributionPercent,TransactionDt,Updated_by,PrevContrib,OfferNum,TransNum FROM dbo.GetVeipEnrollDetails_vw WITH (NOLOCK) WHERE OptNum = @intOptNum"
    },

    "GetGrantAlert":{
        "GrantAlertAction" : "SELECT OptNum,GrantNum,[Key],Header,SubMessage,[GrantShortDesc]  FROM dbo.GetGrantAlertActionCard_vw WITH(NOLOCK) WHERE OptNum  = @intOptNum " ,
        "getAlertBell": "SELECT OptNum,AlertId,AlertRelatedValue,AlertMessage,SortOrder FROM dbo.GetUserAlertBell_vw WITH (NOLOCK) WHERE  OptNum = @intOptNum "
    },

    
    "RSUDivSummary": {
        "getRSUDivSum" : "SELECT OptNum,TotalDividendsQty,TotalDividendsAmt FROM dbo.GetRsuDivSummary_vw WITH (NOLOCK) WHERE OptNum ="
    },
    "OptionsPage":
    {
        "Details":"SELECT od.GrantDesc,od.GrantNum,od.GrantId,CONVERT(VARCHAR,od.GrantDate,106)  [GrantDate],CONVERT(VARCHAR,od.ExpirationDt,106)  [ExpirationDt],od.GrantPrice,od.SharesGranted,od.AwardValueUSD, dbo.CodeDetailValue_fn(8,ga.GrantStatus) [GrantAccepted],od.HasSalable ,od.HasExercisable,od.HasVest,(SELECT TOP 1 ge.EventDt FROM dbo.GrantEvent ge WHERE PastInd = 'N' AND ge.GrantNum =  @intGrantNum AND EventTypeCd = (CASE WHEN ((SELECT COUNT(ge.GrantNum) FROM dbo.GrantEvent ge WITH (NOLOCK) WHERE ge.GrantNum =  @intGrantNum AND EventTypeCd = 1) > 0) THEN CASE WHEN ((SELECT COUNT(ge.GrantNum)  FROM dbo.GrantEvent ge WITH (NOLOCK) WHERE ge.GrantNum = @intGrantNum AND EventTypeCd = 3) > 0) THEN CASE WHEN ((SELECT COUNT(ge.GrantNum) FROM dbo.GrantEvent ge WITH (NOLOCK) WHERE ge.GrantNum =  @intGrantNum AND EventTypeCd = 4) > 0) THEN 4 ELSE 3 END ELSE 1 END ELSE NULL END) ORDER BY EventDt) [NextExerciseable]  ,(SELECT TOP 1 ge.TotalSharesQty FROM dbo.GrantEvent ge WHERE PastInd = 'N' AND ge.GrantNum =  @intGrantNum AND EventTypeCd = CASE WHEN ((SELECT COUNT(ge.GrantNum)  FROM dbo.GrantEvent ge WITH (NOLOCK) WHERE ge.GrantNum =  @intGrantNum  AND EventTypeCd = 1) > 0) THEN CASE WHEN ((SELECT COUNT(ge.GrantNum) FROM dbo.GrantEvent ge WITH (NOLOCK) WHERE ge.GrantNum =  @intGrantNum AND EventTypeCd = 3) > 0) THEN CASE WHEN ((SELECT COUNT(ge.GrantNum) FROM dbo.GrantEvent ge WITH (NOLOCK) WHERE ge.GrantNum =  @intGrantNum AND EventTypeCd = 4) > 0) THEN 4 ELSE 3 END ELSE 1 END ELSE NULL END ORDER BY EventDt) [SharesNextExerciseable] ,od.Unvested ,od.ForfeitedQty  , od.VestedButUnExercisable  ,od.VestedAndExercisable ,od.Exercised ,od.NetRemainingAtBroker ,od.ProgramsType ,ga.GrantAgreementTabVisibleInd [IsGrantAgreementValid] FROM dbo.GetOptDetails_vw od WITH (NOLOCK) LEFT JOIN dbo.GrantAgreeStatus ga WITH (NOLOCK) ON ga.GrantNum = @intGrantNum WHERE od.GrantNum = @intGrantNum AND od.HoldingsTypeId = 3 ORDER BY od.[GrantDate] DESC SELECT CASE WHEN ge.EventDt = CONVERT(DATETIME,'12/31/2097') THEN NULL ELSE CONVERT(VARCHAR,ge.EventDt,106) END [Date], ge.TotalSharesQty [Shares],CASE WHEN EventDt = CONVERT(DATETIME,'12/31/2097') THEN 'Suspended' ELSE CASE WHEN PastInd = 'Y' THEN 'Vested' ELSE 'Unvested' END  END [Status] FROM dbo.GrantEvent ge WITH (NOLOCK) WHERE GrantNum = @intGrantNum AND EventTypeCd = 1 SELECT CONVERT(VARCHAR,EventDt,106) [Date],TotalSharesQty [Shares] ,CASE WHEN PastInd = 'Y' THEN 'Exercisable' ELSE 'Unexercisable' END [Status] FROM dbo.GrantEvent WITH (NOLOCK) WHERE GrantNum = @intGrantNum AND EventTypeCd = 3 SELECT CONVERT(VARCHAR,EventDt,106) [Date] ,TotalSharesQty [Shares], CASE WHEN PastInd = 'Y' THEN 'Salable' ELSE 'Unsalable' END [Status] FROM dbo.GrantEvent WITH (NOLOCK) WHERE GrantNum = @intGrantNum AND EventTypeCd = 4"
        
    },
    "FoundersPage" :
    {
        "Details" :"SELECT grnt.GrantLongDesc [ShareType],CONVERT(varchar,grnt.GrantDt,106) [Issued], cd.Decode [IssuedIn],CONVERT(INT, grnt.FounderNetIssuedQty)[SharesIssued], ISNULL(grnt.PricingMethod,'') [PricingMethod],CASE (SELECT OpenWindowInd FROM dbo.FounderTradingWindow WITH (NOLOCK) WHERE GETDATE() BETWEEN StartDt AND EndDt) WHEN 'Y' THEN 'Opened' WHEN 'N' THEN 'Closed' ELSE '' END [TradingWindow],CONVERT(INT, grnt.FounderNetIssuedQty) [NetIssued] ,grnt.TotalTransferredToFCT [TotalTransferredToFCT] ,CONVERT(INT,grnt.SoldQty) [TotalSoldTransferred] ,CONVERT(INT,grnt.RemainingAtBrokerQty) [TotalRemaining] ,grnt.EligibleForSaleTransfer [EligibleForSaleTransfer] ,grnt.TotalVotingShares [TotalVotingShares] , grnt.RedemptionMethod [RedemptionMethod] ,grnt.GrantGroupId [GrantGroupId] , CASE WHEN grnt.GrantGroupId = 88 THEN 1 ELSE 0 END [isSCAInd] FROM [GrantFdr_vw] grnt WITH (NOLOCK) LEFT JOIN CodeDetail cd WITH (NOLOCK) ON cd.Code = grnt.GrantCountryCd WHERE grnt.GrantNum = @intGrantNum SELECT CONVERT(VARCHAR,ge.EventDt,106) [Release] ,SUM(CONVERT(INT,ge.TotalSharesQty )) [Amount] FROM dbo.GrantEvent ge INNER JOIN dbo.[Grant] g ON g.GrantNum = ge.GrantNum INNER JOIN dbo.GrantGroup gGrp WITH (NOLOCK) ON g.GrantGroupId = gGrp.GrantGroupId WHERE (g.OptNum =  @intTransfereeOptNum OR g.GrantNum = @intGrantNum) AND g.OptNum !=  CASE WHEN @intTransfereeOptNum  = 0 AND EXISTS(SELECT vw.OptNum ,u.LastNm [TransfereeNm] FROM dbo.TransfereeDetails_vw vw WITH (NOLOCK) INNER JOIN dbo.[User] u ON vw.OptNum = u.OptNum WHERE RootGrantNum = @intGrantNum ) THEN (SELECT TOP 1 vw.OptNum FROM dbo.TransfereeDetails_vw vw INNER JOIN dbo.[User] u ON vw.OptNum = u.OptNum WHERE RootGrantNum = @intGrantNum ORDER BY OptNum) ELSE @intTransfereeOptNum END AND g.GrantNum = @intGrantNum GROUP BY ge.EventDt ORDER BY convert(datetime,ge.EventDt) ASC SELECT vw.OptNum,u.LastNm [TransfereeNm] FROM dbo.TransfereeDetails_vw vw INNER JOIN dbo.[User] u ON vw.OptNum = u.OptNum WHERE RootGrantNum = @intGrantNum ORDER BY OptNum SELECT grnt.OptNum [OptNum] ,grnt.GrantLongDesc [ShareType] ,ISNULL(grnt.FounderEstimatedSalesPricing,'') [PricingMethod] ,grnt.FounderRedemptionMethodCd[RedemptionMethod] ,CASE (SELECT TOP 1 OpenWindowInd FROM dbo.[FounderTradingWindow] WITH (NOLOCK) WHERE GETDATE() BETWEEN StartDt AND EndDt) WHEN 'Y' THEN 'Opened' WHEN 'N' THEN 'Closed' ELSE '' END [TradingWindow] ,SUM(grnt.FounderTransferredInQty) [TransferredIn] ,SUM(grnt.FounderTransferredOutQty) [TransferredOut] ,SUM(grnt.SoldQty) [TotalSold] ,SUM(grnt.RemainingAtBrokerQty) [TotalRemaining]  ,SUM(grnt.FounderEligibleForSaleTransferQty) [EligibleForSaleTransfer] ,SUM(grnt.FounderVotingSharesQty) [TotalVotingShares] FROM dbo.[Grant] grnt WITH (NOLOCK) INNER JOIN dbo.GrantGroup gGrp WITH (NOLOCK) ON grnt.GrantGroupId = gGrp.GrantGroupId WHERE grnt.RootGrantNum = @intGrantNum AND grnt.OptNum = (CASE WHEN @intTransfereeOptNum  = 0 AND  EXISTS(SELECT vw.OptNum ,u.LastNm [TransfereeNm] FROM dbo.TransfereeDetails_vw vw INNER JOIN dbo.[User] u ON vw.OptNum = u.OptNum WHERE RootGrantNum = @intGrantNum ) THEN (SELECT TOP 1 vw.OptNum FROM dbo.TransfereeDetails_vw vw INNER JOIN dbo.[User] u ON vw.OptNum = u.OptNum WHERE RootGrantNum = @intGrantNum ORDER BY OptNum) ELSE @intTransfereeOptNum END) GROUP BY grnt.OptNum ,grnt.GrantLongDesc ,grnt.FounderRedemptionMethodCd ,grnt.FounderEstimatedSalesPricing SELECT CONVERT(VARCHAR,ge.EventDt,106) [Release] ,SUM(CONVERT(INT,ge.TotalSharesQty)) [Amount] FROM dbo.[Grant] grnt WITH (NOLOCK) INNER JOIN dbo.GrantGroup gGrp WITH (NOLOCK) ON grnt.GrantGroupId = gGrp.GrantGroupId INNER JOIN dbo.GrantEvent ge WITH (NOLOCK) ON grnt.GrantNum = ge.GrantNum WHERE (grnt.GrantNum = @intGrantNum OR RootGrantNum = @intGrantNum) AND (grnt.OptNum = CASE WHEN EXISTS(SELECT vw.OptNum ,u.LastNm [TransfereeNm] FROM dbo.TransfereeDetails_vw vw INNER JOIN dbo.[User] u ON vw.OptNum = u.OptNum WHERE RootGrantNum = @intGrantNum AND vw.OptNum = @intTransfereeOptNum) THEN (SELECT TOP 1 vw.OptNum FROM dbo.TransfereeDetails_vw vw INNER JOIN dbo.[User] u ON vw.OptNum = u.OptNum WHERE RootGrantNum = @intGrantNum AND vw.OptNum = @intTransfereeOptNum ORDER BY OptNum) ELSE @intTransfereeOptNum END) GROUP BY ge.EventDt ORDER BY convert(datetime,ge.EventDt) ASC"
    },
    "ESPPPage":{   
          "PutEnrollWithdrawESPP": " DECLARE @B_PURCHASE VARCHAR(1) = @bPurchase DECLARE @UPDATED_BY INT = @updBy DECLARE @OfferNum1 INT = @offNum1 DECLARE @TRANSACTION_TYPE INT = @transType DECLARE @OPT_NUM1 INT = @optNum1 DECLARE @WITHHOLDING_PERCENT INT = @wp DECLARE @chvSSN VARCHAR(10) DECLARE @chvOptID VARCHAR(10) DECLARE @Transaction_Dt DATETIME DECLARE @intOfferNum INT DECLARE @intOptNum INT, @OPT_NUM2 INT DECLARE @OFFERNUM INT DECLARE @TRANSTYPEEE INT DECLARE @EnrollStatus INT DECLARE @OfferingFlag INT DECLARE @intOfferNumvW INT DECLARE @isFreezePeriod INT SET @intOfferNum = @OfferNum1 SET @Transaction_Dt = GETDATE() SET @intOptNum = @OPT_NUM1 SET @OFFERNUM = @OfferNum1 SET @OPT_NUM2 = @OPT_NUM1 DECLARE @EsppEligibleInd VARCHAR(1) DECLARE @EsppCurrentOPEnrollGroupID  INT DECLARE @EsppNextOPEnrollGroupId INT IF @TRANSACTION_TYPE = 3 OR @TRANSACTION_TYPE = 5 BEGIN IF EXISTS(SELECT 1 FROM OFFERING WHERE OfferNum = @OfferNum1 AND GETDATE() BETWEEN EnrollmentStartDt and EnrollmentEndDt) BEGIN SET @TRANSTYPEEE = (SELECT TOP 1 TRANSACTION_TYPE FROM WEB_TBL_ESPP_TRANS WHERE OFFER_NUM = @OfferNum1 AND OPT_NUM = @OPT_NUM1 ORDER BY TRANSACTION_NO DESC) SELECT @EsppEligibleInd = EsppEligibleInd, @EsppCurrentOPEnrollGroupID = EsppCurrentOPEnrollGroupID, @EsppNextOPEnrollGroupId = EsppNextOPEnrollGroupId FROM [USER] WHERE OPTNUM = @OPT_NUM1 IF ((@EsppEligibleInd = 'Y') AND (@EsppCurrentOPEnrollGroupID = 1 OR @EsppNextOPEnrollGroupId = 1) AND (@TRANSTYPEEE IS NULL AND @TRANSACTION_TYPE = 3) OR (@TRANSTYPEEE = 1 AND @TRANSACTION_TYPE = 5)OR (@TRANSTYPEEE = 5 AND @TRANSACTION_TYPE = 3) OR (@TRANSTYPEEE = 2 AND @TRANSACTION_TYPE = 5) )  BEGIN SELECT @chvSSN = ParticipantNbr, @chvOptID = PersonnelNbr FROM dbo.[User] WHERE Optnum = @OPT_NUM1 INSERT INTO dbo.Web_tbl_Espp_Trans(SSN ,Transaction_Type , Withholding_Percent ,Transaction_Dt ,User_Field1 , Offer_Num ,Opt_Num ,B_Purchase ,Updated_By) SELECT @chvSSN , a.OldValue ,@WITHHOLDING_PERCENT , @Transaction_Dt ,@chvOptID ,@OFFERNUM ,@OPT_NUM2 ,@B_PURCHASE ,@UPDATED_BY FROM Mapping a WHERE NewValue = @TRANSACTION_TYPE AND Category = 'EsppEnrollmentStatus' SELECT 0 END ELSE BEGIN SELECT 'INVALID TRANSACTION' END END ELSE BEGIN SELECT 'INVALID TRANSACTION' END END ELSE IF @TRANSACTION_TYPE = 8 BEGIN SELECT @OfferingFlag = OfferingFlag, @intOfferNumvW = OfferNum, @isFreezePeriod = [isFreezePeriod],@EnrollStatus = EnrollStatus FROM dbo.GetEsppEnrollDetails_vw WITH (NOLOCK) WHERE OptNum = @OPT_NUM1 and offernum = @OfferNum1 IF @EnrollStatus = 8 BEGIN SELECT 'INVALID TRANSACTION' END ELSE IF @EnrollStatus = 3 OR @EnrollStatus = 5 OR @EnrollStatus = 7 BEGIN IF @isFreezePeriod = 1 AND @OfferingFlag = 1 BEGIN SELECT 'INVALID TRANSACTION' END ELSE BEGIN SELECT @chvSSN = ParticipantNbr, @chvOptID = PersonnelNbr FROM dbo.[User] WHERE Optnum = @OPT_NUM1 INSERT INTO dbo.Web_tbl_Espp_Trans(SSN ,Transaction_Type , Withholding_Percent ,Transaction_Dt ,User_Field1 , Offer_Num ,Opt_Num ,B_Purchase ,Updated_By) SELECT @chvSSN , a.OldValue ,@WITHHOLDING_PERCENT , @Transaction_Dt ,@chvOptID ,@OFFERNUM ,@OPT_NUM2 ,@B_PURCHASE ,@UPDATED_BY FROM Mapping a WHERE NewValue = @TRANSACTION_TYPE AND Category = 'EsppEnrollmentStatus' SELECT 0 END END ELSE BEGIN SELECT 'INVALID TRANSACTION' END END ELSE BEGIN SELECT 'INVALID TRANSACTION' END ",
        "offeringDetails": "SELECT OfferingFlag,OfferNum,OptNum,PeriodStartDt,PeriodEndDt,EnrollmentStartDt,EnrollmentEndDt,TaxElectionStartDt,TaxElectionEndDt,EnrollStatus,ContributionPercent,TransactionDt,Updated_by,PrevContrib,isOpenEnrollment,isFreezePeriod,isOpenTaxElection,TransNum FROM dbo.GetEsppEnrollDetails_vw WITH (NOLOCK) WHERE OptNum = @intOptNum" ,     
        "transactionDetails":" SELECT gee.[SSN] ,gee.[EnrollStatus] ,gee.[ContributionPercent] ,CONVERT(VARCHAR,gee.TransactionDt,106)[TransactionDt] ,gee.[OfferNum] ,gee.[OptNum] ,gee.[TermAgreementFlag] ,gee.[Updated_By] ,gee.[CurrentOPGroupId] ,gee.[NextOPGroupId] FROM dbo.GetEsppEnrollTrans_vw gee WITH (NOLOCK) INNER JOIN dbo.GetEsppEnrollTransMax_vw gem WITH (NOLOCK) ON gee.TransNum = gem.MaxTransNo AND gee.OptNum = gem.OptNum WHERE gee.OptNum = @intOptNum AND gee.OfferNum = @intOfferNum" ,
        "taxelect":"DECLARE @intCurrOffNum INT DECLARE @OptNum INT = @intOptNum SET @intCurrOffNum = (SELECT OFFERNUM FROM dbo.OFFERING WITH(NOLOCK) WHERE (GETDATE() >= PERIODSTARTDT AND PERIODENDDT >= GETDATE()) AND PROGRAMID = 3) IF EXISTS (( SELECT TRANS_NUM FROM dbo.WEB_TBL_ESPP_TAXELECT_TRANS WITH(NOLOCK) WHERE OPT_NUM = @OptNum AND OFFER_NUM = @intCurrOffNum) ) BEGIN SELECT OPT_ID,OptNum,OfferNum,TaxElect,LAST_UPDATE,CountryCd,UPDATED_BY,TaxElect2 FROM dbo.GetEsppTaxElectTrans_vw WHERE OptNum = @intOptNum AND OFFERNUM = @intCurrOffNum ORDER BY TRANS_NUM DESC END ELSE SELECT TOP 1 wte.OPT_ID,wte.OptNum,@intCurrOffNum AS OfferNum ,wte.TaxElect,CONVERT(VARCHAR,wte.LAST_UPDATE,106) [LAST_UPDATE],wte.CountryCd,wte.UPDATED_BY,wte.TaxElect2 FROM dbo.GetEsppTaxElectLkUp_vw wte WHERE OptNum = @intOptNum AND wte.OfferNum = @intCurrOffNum", 
        "inserttaxelect":"DECLARE @intCurrOffNum INT DECLARE @intPrevOffNum INT SET @intCurrOffNum = (SELECT OFFERNUM FROM OFFERING WHERE (GETDATE() >= PERIODSTARTDT AND PERIODENDDT >= GETDATE()) AND PROGRAMID = 3) SET @intPrevOffNum = (SELECT MAX(OFFERNUM) FROM OFFERING WHERE OFFERNUM < @intCurrOffNum AND PROGRAMID = 3) IF EXISTS (SELECT TRANS_NUM FROM Web_Tbl_Espp_TaxElect_Trans WHERE OPT_NUM = @OptNum AND OFFER_NUM = @intCurrOffNum) BEGIN INSERT INTO Web_Tbl_Espp_TaxElect_Trans (OPT_ID, OPT_NUM, OFFER_NUM, TAX_ELECT, LAST_UPDATE, COUNTRY_CODE, UPDATED_BY, TAX_ELECT_2) SELECT TOP 1 OPT_ID, OPT_NUM, OFFER_NUM, TAX_ELECT = @TaxElect, LAST_UPDATE = GETDATE(), COUNTRY_CODE, UPDATED_BY = @EnterpriseID, CASE WHEN @TaxElect = 'PW' THEN 'NSD' ELSE 'PW' END FROM Web_Tbl_Espp_TaxElect_Trans WHERE(Opt_Num = @OptNum  AND Offer_Num = @OfferNum) ORDER BY TRANS_NUM DESC END ELSE INSERT INTO Web_Tbl_Espp_TaxElect_Trans (OPT_ID, OPT_NUM, OFFER_NUM, TAX_ELECT, LAST_UPDATE, COUNTRY_CODE, UPDATED_BY, TAX_ELECT_2) SELECT TOP 1 u.PERSONNELNBR AS OPT_ID, u.OPTNUM AS OPT_NUM, @intCurrOffNum AS OFFER_NUM, @TaxElect, GETDATE(), u.COUNTRYCD AS COUNTRY_CODE, @EnterpriseID, CASE WHEN @TaxElect = 'PW' THEN 'NSD' ELSE 'PW' END FROM [USER] u INNER JOIN WEB_TBL_ESPP_TAXELECTFLAG_LKUP wte ON wte.COUNTRY_CODE = u.COUNTRYCD INNER JOIN OFFERING o ON o.OFFERNUM = wte.OFFER_NUM WHERE u.OPTNUM = @OptNum AND o.OFFERNUM = @intPrevOffNum GROUP BY u.PERSONNELNBR, u.OPTNUM, wte.TAX_ELECT, u.COUNTRYCD, wte.TAX_ELECT_2 IF @@Error = 0 BEGIN SELECT 0 END ELSE BEGIN SELECT 2 END"
    },
    "ActionItemCard":{
 
        "ESPPTrans":" SELECT OfferingFlag, OfferNum, OptNum, EnrollmentFlag, Header, SubMessage, EsppEligibility FROM dbo.GetEsppEnrollActionCard_vw WITH (NOLOCK) WHERE OptNum = @intOptNum ",
        "VEIPTrans":" SELECT OfferingFlag, OfferNum, OptNum, Header, SubMessage, EnrollmentFlag, VeipEligibility, CyNum FROM dbo.GetVeipEnrollActionCard_vw WITH (NOLOCK) WHERE OptNum = @intOptNum "
         
    },
    "Reports":{
        "ReportTypes": "Select ReportTypeId,ReportTypeDescription from dbo.GetReportTypes_vw"
        ,"HasEspp" : "Select top 1 OptNum FROM dbo.HasEspp_vw WITH (NOLOCK) WHERE OptNum = @OptNum"
        ,"HasVeip" : "Select top 1 OptNum FROM dbo.HasVeip_vw WITH (NOLOCK) WHERE OptNum = @OptNum"
        ,"HasGrant" : "Select top 10 HoldingsTypeId FROM dbo.GetGrantDetails_vw WITH (NOLOCK) where OptNum = @OptNum  AND HoldingsTypeId in(1,2,3,4) group by HoldingsTypeId"
        
    },
    
    "ExchangeRateHistory":{
        "ExchangeRateHistory1":"SELECT CONVERT(VARCHAR,Recd_Dt,106)  [Date], Exch_Rt [Currency Exchange Rate] FROM dbo.Tbl_Forex with(nolock) WHERE Cnvt_To_Curr_Cd = @CurrencyCd ",
        "ExchangeRateHistory2":" AND Recd_Dt >= @From ",
        "ExchangeRateHistory3":" AND Recd_Dt <= @To ",
        "ExchangeRateHistory4":" ORDER BY Recd_Dt DESC OFFSET @varOffset ROWS",
        "ExchangeRateHistory5":" FETCH FIRST 50 ROWS ONLY;",
        "getTotalRows":"SELECT COUNT(Recd_Dt) [Total Rows] FROM dbo.Tbl_Forex with(nolock) WHERE Cnvt_To_Curr_Cd = @CurrencyCd AND ( Recd_Dt >= @From  AND Recd_Dt <= @To )"
    },

    "SharePriceHistory":{
        "SharePriceHistory1":"SELECT CONVERT(VARCHAR,PRICE_DT,106)  AS [Date], HIGH_PRC AS [High (USD)], LOW_PRC AS [Low (USD)], CLOSE_PRC AS [Close (USD)], MARKET_PRC AS [Fair Market Value (USD)], VOLUME AS [Trading Volume] FROM dbo.PRICE WITH(NOLOCK) WHERE PRICE_DT >= @From ",
        "SharePriceHistory2": " AND PRICE_DT <= @To",
        "SharePriceHistory3":" ORDER BY PRICE_DT DESC OFFSET @varOffset ROWS",
        "SharePriceHistory4":" FETCH FIRST 50 ROWS ONLY;",
        "getTotalRows":"SELECT COUNT(PRICE_DT) [Total Rows] FROM dbo.PRICE WITH(NOLOCK) WHERE PRICE_DT >= @From AND PRICE_DT <= @To"

      
    },
   
    
    "rsuActivityRpt":{

        "getGrantDrpdwn":" SELECT g.GrantLongDesc FROM [Grant] g WITH (NOLOCK) inner join GrantGroup gg WITH (NOLOCK) on g.GrantGroupId = gg.GrantGroupId  WHERE g.OptNum = @intOptNum AND gg.HoldingsTypeId IN (2,4) AND ISNULL(g.RootGrantNum,0) = 0 GROUP BY g.GrantLongDesc",
        "getRsuActRpt":" SELECT OptNum,GrantLongDesc,grantNum,RootGrantNum,HoldingsTypeId,[Program],[RSU Award],[Grant ID],CONVERT(VARCHAR,[Grant Date],106) [Grant Date],CONVERT(VARCHAR,[Transaction Date],106) [Transaction Date],[Transaction Type],[Fair Market Value per Share on Release Date (USD)],[Currency Code],[Exchange Rate in Event Date],[Shares Released],[Shares Vested],[Total Value on Transaction Date in Local Currency],[Shares Withheld For Taxes],[Total Value of Taxes Withheld in Local Currency],[Sale-Fractional Share],[Value of Fractional Share Returned in Local Currency],[Total Shares W/H],[Total Value of Shares W/H in Local Currency (Taxes Withheld + Fractional Shares Returned)],[Shares Released to Broker] FROM dbo.GetRsuActivityRpt_vw WITH(NOLOCK) WHERE OptNum = @intOptNum AND [Transaction Date] BETWEEN @from AND @to ",
        "appendRsuRpt":" AND (GrantLongDesc LIKE ",
        "pagination":" ORDER BY [Transaction Date] DESC OFFSET @offset ROWS FETCH FIRST 50 ROWS ONLY; ",
        "getSumRows":" SELECT SUM([Fair Market Value per Share on Release Date (USD)]) [Total Fair Market Value per Share on Release Date (USD)],SUM([Shares Released]) [Total Shares Released],SUM([Shares Vested]) [Total Shares Vested],SUM([Total Value on Transaction Date in Local Currency]) [Total Value on Transaction Date in Local Currency],SUM([Shares Withheld For Taxes]) [Total Shares Withheld For Taxes],SUM([Total Value of Taxes Withheld in Local Currency]) [Total Value of Taxes Withheld in Local Currency],SUM([Sale-Fractional Share]) [Total Sale-Fractional Share],SUM([Value of Fractional Share Returned in Local Currency]) [Total Value of Fractional Share Returned in Local Currency],SUM([Total Shares W/H]) [Total Shares W/H],SUM([Total Value of Shares W/H in Local Currency (Taxes Withheld + Fractional Shares Returned)]) [Total Value of Shares W/H in Local Currency (Taxes Withheld + Fractional Shares Returned)],SUM([Shares Released to Broker]) [Total Shares Released to Broker] FROM dbo.GetRsuActivityRpt_vw WITH(NOLOCK) WHERE OptNum = @intOptNum AND [Transaction Date] BETWEEN @from1 AND @to1 ",
        "getTotalRows":" SELECT COUNT(*) AS [TotalRows] FROM dbo.GetRsuActivityRpt_vw WITH(NOLOCK) WHERE OptNum = @intOptNum AND [Transaction Date] BETWEEN @from2 AND @to2"


        
    },

    "enrollHistRpt":{

        "enrollVEIP":"SELECT [Date], PersonnelNbr [Personnel Number],LastNm [Last Name], FirstNm [First Name],EmployeeStatusDesc [Employment Status], ProgramNm [Purchase Program],PurchasePeriod [Purchase Period], [Status], ContributionPercent [Contribution Percent], MatchingGrant [Matching Grant] FROM GetVeipEnrollRpt_vw WITH(NOLOCK) Where Optnum = @optnum AND Date BETWEEN CONVERT(DATETIME,@from) AND CONVERT(DATETIME,@to)",
        "enrollESPP":"SELECT [Date], PersonnelNbr [Personnel Number],LastNm [Last Name], FirstNm [First Name],EmployeeStatusDesc [Employment Status], ProgramNm [Purchase Program],PurchasePeriod [Purchase Period], [Status], ContributionPercent [Contribution Percent], MatchingGrant [Matching Grant] FROM GetEsppEnrollRpt_vw WITH(NOLOCK) Where Optnum = @optnum AND Date BETWEEN CONVERT(DATETIME,@from) AND CONVERT(DATETIME,@to)",
        "enrollAll":"SELECT [Date], PersonnelNbr [Personnel Number],LastNm [Last Name], FirstNm [First Name],EmployeeStatusDesc [Employment Status], ProgramNm [Purchase Program],PurchasePeriod [Purchase Period], [Status], ContributionPercent [Contribution Percent], MatchingGrant [Matching Grant] FROM GetAllEnrollRpt_vw WITH(NOLOCK) Where Optnum = @optnum AND Date BETWEEN CONVERT(DATETIME,@from) AND CONVERT(DATETIME,@to)",
        "enrollProgDrpdwn":"SELECT ProgramNm FROM dbo.GetAllEnrollRpt_vw WITH(NOLOCK) where Optnum = @intOptNum GROUP BY ProgramNm", 
        "pagination":" ORDER BY YEAR(Date) DESC, MONTH(Date) DESC, DAY(DATE) DESC OFFSET @offset ROWS FETCH FIRST 50 ROWS ONLY; ",
        "VEIPTotalRows":"SELECT COUNT([Date]) [Total Rows] FROM GetVeipEnrollRpt_vw WITH(NOLOCK) Where Optnum = @optnum AND Date BETWEEN CONVERT(DATETIME,@from) AND CONVERT(DATETIME,@to)",
        "ESPPTotalRows":"SELECT COUNT([Date]) [Total Rows] FROM GetEsppEnrollRpt_vw WITH(NOLOCK) Where Optnum = @optnum AND Date BETWEEN CONVERT(DATETIME,@from) AND CONVERT(DATETIME,@to)",
        "AllTotalRows":"SELECT COUNT([Date]) [Total Rows] FROM GetAllEnrollRpt_vw WITH(NOLOCK) Where Optnum = @optnum AND Date BETWEEN CONVERT(DATETIME,@from) AND CONVERT(DATETIME,@to)"

    },
    "awardDetails":{
        "RSUHeader":"Select [AvailableToSell],[Value],[Broker],CONVERT(VARCHAR,[NextRelease],106) [NextRelease],[SharesReleasing],[GrantAccepted],[UnreleasedUnexercisable],[ReleasedExercisableQty],[Expiration],[Forfeited],[RSUGranted],[GrantId],[GrantPrice],[RsuTotalValue],[ExchangeRate] from [GetRSUDetails_vw] WITH (NOLOCK) where GrantNum = @intGrantNum SELECT CONVERT(VARCHAR,EventDt,106) [VestReleaseDate] ,ge.RsuParentSharesQty [OriginalShares] ,EventTypeCd [VestReleaseFlag] FROM dbo.GrantEvent ge WITH (NOLOCK) WHERE EventTypeCd IN (1,2) AND GrantNum = @intGrantNum ORDER BY EventDt",
        "awardSchedule":" SELECT CONVERT(VARCHAR,EventDt,106) [VestReleaseDate] ,ge.RsuParentSharesQty [OriginalShares] ,EventTypeCd [VestReleaseFlag] FROM dbo.GrantEvent ge WITH (NOLOCK) WHERE EventTypeCd IN (1,2) AND GrantNum = @intGrantNum ORDER BY EventDt",
        "veipTrans": "SELECT OptNum,OfferNum,ProgramYear,CONVERT (INT,Contribution) [Contribution],TotalContributionLoc,TotalPurchaseValueLoc,CONVERT (INT,TotalSharesPurchased) [TotalSharesPurchased],CONVERT (INT,SoldTransferred) [SoldTransferred],CONVERT (INT,NetRemainingAtBroker) [NetRemainingAtBroker],LocalCurrencyCd FROM dbo.GetVeipDetailShareAct_vw WITH(NOLOCK) WHERE OptNum = @intOptNum AND OfferNum = @intOfferNum SELECT CONVERT(VARCHAR,PurchaseDt,106) [Date],PurchasePriceUSD,CONVERT (INT,PurchasedShares) [PurchasedShares],ValueUSD,ValueLoc,CONVERT (INT,Disposed) [Disposed],CONVERT (INT,RemainingBroker) [RemainingBroker],LocalCurrencyCd FROM dbo.GetVeipDetailMonthPurch_vw WITH(NOLOCK) WHERE OptNum = @intOptNum AND OfferNum = @intOfferNum ORDER BY PurchaseDt DESC",
        "veipDetails": " DECLARE @intCyNum INT,@intEnrollmentStatusFl INT = 0,@intTransferredFl INT = 0 SET @intEnrollmentStatusFl = (SELECT TOP 1 CASE WHEN map.NewValue IN (6,7,8) THEN 1 ELSE 0 END FROM dbo.Web_Tbl_Veip_Trans tvt WITH(NOLOCK) INNER JOIN Mapping map ON tvt.TRANS_TYPE = map.OldValue WHERE Opt_Num = @intOptNum AND Cy_Num = @intCyNum AND map.Category = 'VeipEnrollmentStatus' ORDER BY Trans_Num DESC) SELECT TOP 1 [MonthlyContributionUSD],[MonthlyContributionLoc],[PriorMonthsCarryOverUSD],[PriorMonthsCarryOverLoc],[TotalContributionUSD],[TotalContributionLoc],[PurchaseCostUSD],[PurchaseCostLoc],[CarryOverToNextMonthUSD],[CarryOverToNextMonthLoc],CONVERT(DECIMAL(20,7),ExchangeRate) [ExchangeRate],LocalCurrencyCd [LocalCurrencyCd],CASE WHEN (@intEnrollmentStatusFl = 1 OR MONTH(PurchaseDt) = 1) OR (@intTransferredFl = 1) THEN 1 ELSE 0 END [IsDisplayRefund] FROM dbo.GetVeipPurchaseInfo_vw WITH(NOLOCK) WHERE OptNum = @intOptNum And OfferNum = @intOfferNum ORDER BY PurchaseDt DESC",
        "esppDetails": "SELECT [OptNum],[OfferNum],[OfferingPeriod],[Contribution],[TotalContributionUSD],[PurchasePriceUSD],[FMVAtPurchaseUSD],[ExchangeRateLoc],[TaxWithholdingMethod],[Account],[SharesPurchased],[WithholdingForTaxes],[FractionalShares],[SoldTransferred],[NetRemainingAtBroker],[TotalContributionLoc],[PurchasePrice],[GrossSharesPurchased],[SharesWithheldTax],[SharesWithheldTax_ValueUSD],[SharesWithheldTax_ValueLoc],[FractionalSharesRefunded],[FractionalSharesRefunded_ValueUSD],[FractionalSharesRefunded_ValueLoc],[NetSharesPurchased], [NetSharesPurchasedShares_ValueUSD],[NetSharesPurchasedShares_ValueLoc],[xFMVAtPurchaseUSD],[xFMVAtPurchaseLoc],[FullValueOfSharesUSD],[FullValueOfSharesLoc],[TotalDiscount_ValueUSD],[TotalDiscountValueLoc],[LocalCurrencyCd],[ActualTax] FROM dbo.GetESPPDetails_vw WITH(NOLOCK) WHERE OptNum = @intOptNum AND OfferNum = @intOfferNum ",
        "rsuIpoDetailsRelInfo":"DECLARE @dtmEventDt DATETIME = @dtEventDate SELECT [ReleaseDate],[Shares],[StatusFlag],[BrokerCd] FROM GetRsuIpoDetailsRelSched_vw WITH (NOLOCK) WHERE OptNum = @intOptNum IF (@dtmEventDt IS NULL) BEGIN SET @dtmEventDt = (SELECT MAX(EventDt) FROM GetRsuIpoDetailsRelInfo_vw WITH (NOLOCK) WHERE PastInd = 'Y' AND OptNum = @intOptNum ) END  IF EXISTS (SELECT EventDt FROM GetRsuIpoDetailsRelInfo_vw WITH (NOLOCK) WHERE EventDt = @dtmEventDt AND PastInd = 'N') BEGIN SELECT ge.RsuParentSharesQty [OriginallyScheduled] ,ge.RsuDividendSharesQty [AdditionalRsu] ,ge.TotalSharesQty [TotalScheduledRsu] ,CONVERT(DECIMAL(13,4),0) [ReleaseFmv] ,'' [TaxWithholdingMethod],'' [LocalCurrencyCd] ,0 [GrossReleased],0.00 [GrossReleasedUsd],0.00 [GrossReleasedLoc],0.0000 [WithheldForTax],CONVERT(DECIMAL(20,2),0) [WithheldForTaxUsd],CONVERT(DECIMAL(20,2),0) [WithheldForTaxLoc],0.0000 [WithholdingRefund],CONVERT(DECIMAL(20,2),0) [WithholdingRefundUsd],CONVERT(DECIMAL(20,2),0) [WithholdingRefundLoc],0 [NetReleased],CONVERT(DECIMAL(20,2),0) [NetReleasedUsd],CONVERT(DECIMAL(20,2),0) [NetReleasedLoc] FROM GetRsuIpoDetailsRelInfo_vw ge INNER JOIN CodeDetail cd WITH (NOLOCK) ON cd.Code = ge.RsuSharesWithheldInd INNER JOIN CodeHeader ch WITH (NOLOCK) ON ch.CategoryNbr = cd.CategoryNbr AND ch.CategoryDesc = 'TaxWithHeldMethod' WHERE EventDt = @dtmEventDt AND ge.OptNum = @intOptNum SELECT 0.0000 [TaxWithheldOriginal],0.0000 [TaxWithheldDividend],CONVERT(DECIMAL(20,2),0) [TaxWithheldOriginalUsd],CONVERT(DECIMAL(20,2),0) [TaxWithheldDividendUsd],CONVERT(DECIMAL(20,2),0) [TaxWithheldOriginalLoc],CONVERT(DECIMAL(20,2),0) [TaxWithheldDividendLoc],0.0000 [WithheldRefundOriginal],0.0000 [WithheldRefundDividend],CONVERT(DECIMAL(20,2),0) [WithheldRefundOriginalUsd],CONVERT(DECIMAL(20,2),0) [WithheldRefundDividendUsd],CONVERT(DECIMAL(20,2),0) [WithheldRefundOriginalLoc],CONVERT(DECIMAL(20,2),0) [WithheldRefundDividendLoc] FROM GetRsuIpoDetailsRelInfo_vw ge WITH (NOLOCK) WHERE EventDt = @dtmEventDt AND ge.OptNum = @intOptNum END ELSE BEGIN SELECT CONVERT(INT,ge.RsuParentSharesQty) [OriginallyScheduled],CONVERT(INT,ge.RsuDividendSharesQty) [AdditionalRsu],CONVERT(INT,ge.TotalSharesQty) [TotalScheduledRsu],CONVERT(DECIMAL(20,4),ge.EventFmv) [ReleaseFmv],cd.Decode [TaxWithholdingMethod],ge.LocalCurrencyCd [LocalCurrencyCd],CONVERT(INT,ge.TotalSharesQty) [GrossReleased],CONVERT(DECIMAL(20,2),ge.TotalSharesQty * EventFmv) [GrossReleasedUsd],CONVERT(DECIMAL(20,2),CONVERT(DECIMAL(20,2),ge.TotalSharesQty * EventFmv) * ExchangeRate) [GrossReleasedLoc],ge.TotalTaxWithheldQty [WithheldForTax],CONVERT(DECIMAL(20,2),TotalTaxWithheldQty * EventFmv) [WithheldForTaxUsd],CONVERT(DECIMAL(20,2),TotalTaxWithheldQty * EventFmv * ExchangeRate) [WithheldForTaxLoc],TotalFractionalSharesQty [WithholdingRefund],CONVERT(DECIMAL(20,2),TotalFractionalSharesQty * EventFmv) [WithholdingRefundUsd],CONVERT(DECIMAL(20,2),CONVERT(DECIMAL(20,2),TotalFractionalSharesQty * EventFmv) * ExchangeRate) [WithholdingRefundLoc],CONVERT(INT,NetSharesQty) [NetReleased],CONVERT(DECIMAL(20,2),NetSharesQty * EventFmv) [NetReleasedUsd],CONVERT(DECIMAL(20,2),CONVERT(DECIMAL(20,2),NetSharesQty * EventFmv) * ExchangeRate) [NetReleasedLoc] FROM GetRsuIpoDetailsRelInfo_vw ge INNER JOIN CodeDetail cd WITH (NOLOCK) ON cd.Code = ge.RsuSharesWithheldInd INNER JOIN CodeHeader ch WITH (NOLOCK) ON ch.CategoryNbr = cd.CategoryNbr AND ch.CategoryDesc = 'TaxWithHeldMethod' WHERE EventDt = @dtmEventDt AND ge.OptNum = @intOptNum SELECT RsuParentTaxWithheldQty [TaxWithheldOriginal],RsuDividendTaxWithheldQty [TaxWithheldDividend],CONVERT(DECIMAL(20,2),RsuParentTaxWithheldQty * EventFmv) [TaxWithheldOriginalUsd],CONVERT(DECIMAL(20,2),RsuDividendTaxWithheldQty * EventFmv) [TaxWithheldDividendUsd],CONVERT(DECIMAL(20,2),CONVERT(DECIMAL(20,2),RsuParentTaxWithheldQty * EventFmv) * ExchangeRate) [TaxWithheldOriginalLoc],CONVERT(DECIMAL(20,2),CONVERT(DECIMAL(20,2),RsuDividendTaxWithheldQty * EventFmv) * ExchangeRate) [TaxWithheldDividendLoc],RsuParentFractionalSharesQty [WithheldRefundOriginal],RsuDividendFracSharesQty [WithheldRefundDividend],CONVERT(DECIMAL(20,2),RsuParentFractionalSharesQty * EventFmv) [WithheldRefundOriginalUsd],CONVERT(DECIMAL(20,2),RsuDividendFracSharesQty * EventFmv) [WithheldRefundDividendUsd],CONVERT(DECIMAL(20,2),CONVERT(DECIMAL(20,2),RsuParentFractionalSharesQty * EventFmv) * ExchangeRate) [WithheldRefundOriginalLoc],CONVERT(DECIMAL(20,2),CONVERT(DECIMAL(20,2),RsuDividendFracSharesQty * EventFmv) * ExchangeRate) [WithheldRefundDividendLoc] FROM GetRsuIpoDetailsRelInfo_vw ge WITH (NOLOCK) WHERE EventDt = @dtmEventDt AND ge.OptNum = @intOptNum END",
        "rsuipodetails":"SELECT GrantDescription ,CONVERT(VARCHAR,GrantDate,106) [GrantDate] ,GrantPrice ,IsGrantAgreementValid ,TotalRsuGranted [TotalAwarded] ,SharesUnreleased [Unreleased] ,Cancelled [Forfeited] ,Released [Released] ,WithholdingTaxShares [WithholdingforTaxes] ,SoldTransferred [SoldTransferred] ,NetRemaining [NetRemainingAtBroker] FROM dbo.GetRsuIpoDetails_vw WITH (NOLOCK) WHERE OptNum = @intOptNum SELECT RsuGranted [OriginalGranted] ,RsuGrantedValue [OriginalGrantedValue] ,AdditionalRsu [AdditionalRsu] ,AdditionalRsuValue [AdditionalRsuValue] ,TotalRsuGranted [TotalAwarded] ,CONVERT(DECIMAL(20,2),TotalRsuGrantedValue) [TotalAwardedValue] FROM dbo.GetRsuIpoDetails_vw WITH (NOLOCK) WHERE OptNum = @intOptNum SELECT SharesUnvested ,VestedButUnreleased ,SharesUnvested + VestedButUnreleased [TotalUnreleased] FROM dbo.GetRsuIpoDetails_vw WITH (NOLOCK) WHERE OptNum = @intOptNum SELECT CONVERT(VARCHAR,EventDt,106) [ReleaseDate] ,CONVERT(INT,TotalSharesQty) [Shares] ,EventFmv [ReleaseFmv] ,CONVERT(DECIMAL(20,2),TotalSharesQty * EventFmv) [Value] FROM dbo.GetRsuIpoDetailsRelVestInfo_vw WITH(NOLOCK) WHERE EventTypeCd = 2 AND OptNum = @intOptNum IF EXISTS (SELECT TOP 1 PastInd FROM GetRsuIpoDetailsRelVestInfo_vw WITH (NOLOCK) WHERE PastInd = 'Y' AND EventTypeCd = 2 ) BEGIN SELECT rd.WithHoldingForTax + rw.WithHoldingForTax [WithheldForTax] ,rd.WithHoldingForTaxValue + rw.WithHoldingForTaxValue [WithheldForTaxValue] ,rd.WithHoldingRefund + rw.WithHoldingRefund [WithHoldingRefund] ,rd.WithHoldingRefundValue + rw.WithHoldingRefundValue [WithHoldingRefundValue] ,rd.WithHoldingTaxShares [TotalWithheld] ,CONVERT(DECIMAL(20,2),rd.WithHoldingTaxSharesValue + rw.WithHoldingForTaxValue + rw.WithHoldingRefundValue) [TotalWithheldValue] FROM dbo.GetRsuIpoDetails_vw rd WITH (NOLOCK) INNER JOIN dbo.GetRsuIpoDetailsWithheld_vw rw WITH (NOLOCK) ON rd.OptNum = rw.OptNum WHERE rw.OptNum = @intOptNum END ELSE BEGIN SELECT CONVERT(DECIMAL(20,4),WithHoldingForTax) [WithheldForTax] ,CONVERT(DECIMAL(20,2),WithHoldingForTaxValue) [WithheldForTaxValue] ,CONVERT(DECIMAL(20,4),WithHoldingRefund) [WithHoldingRefund] ,CONVERT(DECIMAL(20,2),WithHoldingRefundValue) [WithHoldingRefundValue] ,CONVERT(DECIMAL(20,4),WithHoldingTaxShares) [TotalWithheld] ,CONVERT(DECIMAL(20,2),WithHoldingTaxSharesValue) [TotalWithheldValue] FROM dbo.GetRsuIpoDetails_vw WITH (NOLOCK) WHERE OptNum = @intOptNum END",
        "rsuDetailsVestInfo": " DECLARE @GrantNum INT = @intGrantNum DECLARE @dtmEventDt DATETIME = @dtEventDate DECLARE @Tbl_GrantEvent TABLE( [ID] INT IDENTITY(1,1),[GrantNum] INT,[TotalSharesQty]DECIMAL(20,4),[EventFmv]DECIMAL(20,5),[EventDt]DATETIME,[PastInd]CHAR(1),[EventTypeCd]INT,[RsuParentSharesQty]INT,[RsuDividendSharesQty]INT,[ExchangeRate]DECIMAL(20,4),[LocalCurrencyCd]VARCHAR(10)) INSERT INTO  @Tbl_GrantEvent( [GrantNum],[TotalSharesQty],[EventFmv],[EventDt],[PastInd],[EventTypeCd],[RsuParentSharesQty],[RsuDividendSharesQty],[ExchangeRate],[LocalCurrencyCd]) SELECT [GrantNum],[TotalSharesQty],[EventFmv],[EventDt],[PastInd],[EventTypeCd],[RsuParentSharesQty],[RsuDividendSharesQty],[ExchangeRate],[LocalCurrencyCd] FROM dbo.GrantEvent ge WITH (NOLOCK) WHERE EventTypeCd = 1 AND GrantNum = @intGrantNum ORDER BY EventDt SELECT CONVERT(VARCHAR,EventDt,106) [VestDate],CONVERT(INT,TotalSharesQty) [Shares],CASE WHEN PastInd = 'Y' THEN 'Vested' ELSE 'Unvested' END [Status] FROM @Tbl_GrantEvent IF (@dtmEventDt IS NULL) BEGIN  SET @dtmEventDt = (SELECT EventDt FROM @Tbl_GrantEvent WHERE ID = 1) END SELECT CONVERT(INT,RsuParentSharesQty) [OriginalGrantedRsu],CONVERT(INT,RsuDividendSharesQty) [AdditionalRsu],CONVERT(INT,TotalSharesQty) [TotalAward],CASE WHEN PastInd = 'N' THEN 0 ELSE EventFmv END [VestFMV],CASE WHEN PastInd = 'N' THEN 0 ELSE CONVERT(DECIMAL(20,2),TotalSharesQty * EventFmv) END [Value],CASE WHEN PastInd = 'N' THEN 0 ELSE CONVERT(DECIMAL(20,2),TotalSharesQty * EventFmv * ExchangeRate) END [ValueLocal],CASE WHEN PastInd = 'N' THEN '' ELSE LocalCurrencyCd END [LocalCurrency] FROM @Tbl_GrantEvent WHERE EventDt = @dtmEventDt " ,
        "rsudetails":"SELECT gr.GrantID ,gr.GrantDescription ,CONVERT(VARCHAR,gr.GrantDate,106)[GrantDate] ,gr.GrantPrice ,dbo.CodeDetailValue_fn(8,ISNULL(ga.GrantStatus,0)) [Acceptance] ,ISNULL(ga.GrantAgreementTabVisibleInd,'N')IsGrantAgreementValid ,CASE WHEN gr.NextRelease = '1900-01-01 00:00:00.000' THEN NULL ELSE CONVERT(VARCHAR,gr.NextRelease,106) END [NextRelease] ,gr.SharesReleasing ,gr.TotalRsuGranted [TotalAwarded] ,gr.SharesUnreleased [Unreleased] ,gr.Cancelled [Forfeited] ,gr.Released [Released] ,gr.WithholdingTaxShares [WithholdingforTaxes] ,gr.SoldTransferred [SoldTransferred] ,gr.NetRemaining [NetRemainingAtBroker] FROM dbo.GetRsuParentDetails_vw gr WITH (NOLOCK) LEFT JOIN dbo.GrantAgreeStatus ga WITH (NOLOCK) ON ga.GrantNum = gr.GrantNum WHERE gr.GrantNum = @intGrantNum SELECT RsuGranted [OriginalGranted] ,CONVERT(DECIMAL(20,2),RsuGrantedValue) [OriginalGrantedValue] ,AdditionalRsu [AdditionalRsu] ,CONVERT(DECIMAL(20,2),AdditionalRsuValue) [AdditionalRsuValue] ,TotalRsuGranted [TotalAwarded] ,CONVERT(DECIMAL(20,2),TotalRsuGrantedValue) [TotalAwardedValue] FROM dbo.GetRsuParentDetails_vw WITH (NOLOCK) WHERE GrantNum = @intGrantNum SELECT SharesUnvested ,VestedButUnreleased ,SharesUnvested + VestedButUnreleased [TotalUnreleased] FROM dbo.GetRsuParentDetails_vw WITH (NOLOCK) WHERE GrantNum = @intGrantNum SELECT CONVERT(DECIMAL(20,4),SUM(TotalTaxWithheldQty)) [WithheldForTax] ,CONVERT(DECIMAL(20,2),SUM(TotalTaxWithheldQty * EventFmv)) [WithheldForTaxValue] ,CONVERT(DECIMAL(20,4),SUM(TotalFractionalSharesQty)) [WithHoldingRefund] ,CONVERT(DECIMAL(20,2),SUM(TotalFractionalSharesQty * EventFmv)) [WithHoldingRefundValue] ,CONVERT(INT,SUM(TotalTaxWithheldQty + TotalFractionalSharesQty)) [TotalWithheld] ,CONVERT(DECIMAL(20,2),SUM((TotalTaxWithheldQty * EventFmv) + (TotalFractionalSharesQty * EventFmv))) [TotalWithheldValue] FROM dbo.GrantEvent ge WITH (NOLOCK) WHERE GrantNum = @intGrantNum AND EventTypeCd = 2 AND PastInd = 'Y' SELECT CONVERT(VARCHAR,EventDt,106) [EventDate] ,CONVERT(INT,TotalSharesQty) [Shares] ,EventFmv [ReleaseFmv] ,CONVERT(DECIMAL(20,2),TotalSharesQty * EventFmv) [SharesValue] FROM dbo.GrantEvent WITH (NOLOCK) WHERE GrantNum = @intGrantNum AND EventTypeCd = 2 AND PastInd = 'Y' ",
        "rsuDetailsDivInfo":"DECLARE @GrantNum INT = @intGrantNum ,@dtmGrantDt DATETIME = @dtGrantDt DECLARE @Tbl_Grant TABLE(ID INT IDENTITY(1,1) ,GrantNum INT ,GrantId VARCHAR(13) ,GrantDt DATETIME ,SharesGrantedQty INT) INSERT INTO @Tbl_Grant(GrantNum,GrantId,GrantDt,SharesGrantedQty) SELECT GrantNum ,GrantId,GrantDt,SharesGrantedQty FROM dbo.[Grant] g WITH (NOLOCK) WHERE RootGrantNum = @intGrantNum ORDER BY GrantDt SELECT CONVERT(VARCHAR,GrantDt,106) [GrantDate] FROM @Tbl_Grant IF (@dtmGrantDt IS NULL) BEGIN SET @dtmGrantDt = (SELECT GrantDt FROM @Tbl_Grant WHERE ID = 1) PRINT 'test' PRINT @dtmGrantDt END SELECT GrantId [GrantId] ,SharesGrantedQty [AdditionalRSUsGranted] FROM @Tbl_Grant WHERE GrantDt = @dtmGrantDt SELECT CONVERT(VARCHAR,ge.EventDt,106) [EventDate] ,CONVERT(INT,ge.RsuParentSharesQty) [Shares] ,ge.EventTypeCd [VestReleaseFlag] FROM @Tbl_Grant g INNER JOIN dbo.GrantEvent ge WITH (NOLOCK) ON ge.GrantNum = g.GrantNum WHERE GrantDt = @dtmGrantDt",
        "rsuIpoDetailsVestInfo": " DECLARE @dtmEventDt DATETIME DECLARE @dtmEventDt1 DATETIME SET @dtmEventDt1 = @dtmEventDate SELECT CONVERT(VARCHAR,EventDt,106) [VestDate],TotalSharesQty [Shares],[Status]FROM dbo.GetRsuIpoDetailsVestInfo_vw WITH (NOLOCK)WHERE OptNum = @intOptNum ORDER BY EventDt IF (@dtmEventDt1 IS NULL) BEGIN SET @dtmEventDt = (SELECT MIN(EventDt) FROM dbo.GetRsuIpoDetailsVestInfo_vw WITH (NOLOCK) WHERE OptNum = @intOptNum) END ELSE BEGIN SET @dtmEventDt = @dtmEventDt1 END SELECT RsuParentSharesQty [OriginalGrantedRsu],RsuDividendSharesQty [AdditionalRsu],TotalSharesQty [TotalAward],[VestFMV],[Value],[ValueLocal],[LocalCurrency] FROM dbo.GetRsuIpoDetailsVestInfo_vw WITH (NOLOCK) WHERE OptNum = @intOptNum AND EventDt = @dtmEventDt " ,
        "rsuDetailsRelInfo": "DECLARE @dtmEventDt DATETIME = @dtEventDate IF EXISTS(SELECT TOP 1 ForfeitedQty FROM dbo.[Grant] g WITH (NOLOCK) WHERE (GrantNum = @intGrantNum OR RootGrantNum = @intGrantNum) AND ForfeitedQty > 0) BEGIN SELECT CONVERT(VARCHAR,EventDt,106) [ReleaseDate] ,CONVERT(INT,TotalSharesQty) [Shares] ,CASE WHEN PastInd = 'Y' THEN CASE WHEN BrokerCd IS NOT NULL THEN 1 ELSE 2 END ELSE 3 END [StatusFlag] ,ISNULL(BrokerCd,0) [BrokerCd] FROM dbo.GrantEvent WITH (NOLOCK) WHERE EventTypeCd = 2 AND GrantNum = @intGrantNum UNION ALL SELECT NULL ,CONVERT(INT,SUM(ForfeitedQty)) ,4 ,NULL FROM dbo.[Grant] g WITH (NOLOCK) WHERE (GrantNum = @intGrantNum OR RootGrantNum = @intGrantNum) END ELSE BEGIN SELECT CONVERT(VARCHAR,EventDt,106) [ReleaseDate] ,CONVERT(INT,TotalSharesQty) [Shares] ,CASE WHEN PastInd = 'Y' THEN CASE WHEN BrokerCd IS NOT NULL THEN 1 ELSE 2 END ELSE 3 END [StatusFlag] ,ISNULL(BrokerCd,0) [BrokerCd] FROM dbo.GrantEvent WITH (NOLOCK) WHERE EventTypeCd = 2 AND GrantNum = @intGrantNum END IF (@dtmEventDt IS NULL) BEGIN SET @dtmEventDt = (SELECT MAX(EventDt) FROM dbo.GetRsuRelEvent_vw ge WITH (NOLOCK) WHERE GrantNum = @intGrantNum AND PastInd = 'Y') END IF (@dtmEventDt IS NULL) BEGIN SET @dtmEventDt = (SELECT MIN(EventDt) FROM dbo.GetRsuRelEvent_vw ge WITH (NOLOCK) WHERE GrantNum = @intGrantNum) END SELECT OriginallyScheduled ,AdditionalRsu ,TotalScheduledRsu ,ReleaseFmv ,TaxWithholdingMethod ,LocalCurrencyCd ,GrossReleased ,GrossReleasedUsd ,GrossReleasedLoc ,WithheldForTax ,WithheldForTaxUsd ,WithheldForTaxLoc ,WithholdingRefund ,WithholdingRefundUsd ,WithholdingRefundLoc ,NetReleased ,NetReleasedUsd ,NetReleasedLoc FROM dbo.GetRsuRelEvent_vw ge WITH (NOLOCK) WHERE EventDt = @dtmEventDt AND GrantNum = @intGrantNum SELECT TaxWithheldOriginal ,TaxWithheldDividend ,TaxWithheldOriginalUsd ,TaxWithheldDividendUsd ,TaxWithheldOriginalLoc ,TaxWithheldDividendLoc ,WithheldRefundOriginal ,WithheldRefundDividend ,WithheldRefundOriginalUsd ,WithheldRefundDividendUsd ,WithheldRefundOriginalLoc ,WithheldRefundDividendLoc FROM dbo.GetRsuRelEvent_vw ge WITH (NOLOCK) WHERE EventDt = @dtmEventDt AND GrantNum = @intGrantNum SELECT g.GrantId ,CONVERT(INT,ge.OriginallyScheduled - ISNULL(ge.TaxWithheldOriginal,0) - ISNULL(ge.WithheldRefundOriginal,0)) [Shares] ,CONVERT(DECIMAL(20,2),(ge.OriginallyScheduled - ISNULL(ge.TaxWithheldOriginal,0) - ISNULL(ge.WithheldRefundOriginal,0)) * ge.ReleaseFmv) [Value] FROM dbo.GetRsuRelEvent_vw ge WITH (NOLOCK) INNER JOIN dbo.[Grant] g WITH (NOLOCK) ON ge.GrantNum = g.GrantNum WHERE EventDt = @dtmEventDt AND ge.PastInd = 'Y' AND (g.GrantNum = @intGrantNum OR g.RootGrantNum = @intGrantNum) ",
        "rsuIpoDetailsGrantInfo":"SELECT [GrantId] [GrantId],CONVERT(INT,[SharesGrantedQty]) [Shares] FROM dbo.GrantRsuIpo_vw WITH (NOLOCK) WHERE OptNum =  @intOptNum ORDER BY GrantDt " ,
        "fdrDetails": "SELECT vw.OptNum,u.TransfereeAccountNbr,u.LastNm,u.TransfereeContactNm, u.EmailAddr [TransfereeNm],vw.NotViewableBySourceInd  AS CanBeViewedBySource FROM dbo.TransfereeDetails_vw vw INNER JOIN dbo.[User] u ON vw.OptNum = u.OptNum INNER JOIN dbo.[Grant] g ON g.GrantNum = vw.RootGrantNum WHERE g.OptNum = @intOptNum AND u.TransfereeTypeCd IS NOT NULL ORDER BY vw.OptNum "
    },

    "IndividualTransferLimitHist": {
        "getIndividualTransferLimitHist" : "SELECT 'Founders' AS [Program],ShareType AS [Share Type],CONVERT(varchar,StartDate,106) + ' - ' + CONVERT(varchar,EndDate,106) AS [Trading Window Period],TotalUnrestricted AS [Total Unrestricted Shares at Period Start],TransferLimitStatus AS [Individual Transfer Limit Status],PricingMethod AS [Estimated Sales Price in Effect],RedemptionMethod AS [Redemption Method],TransferLimit AS [Individual Transfer Limit Shares],AdditionalShares AS [Additional Shares Available Due to Transfer Limit Waiver],TotalSold AS [Total Shares Sold/Transferred],(TransferLimit + AdditionalShares) - (TotalSold) AS [Net Shares Eligible for Sale/Transfer in Period] FROM dbo.FounderTransferLimit_VW WITH(NOLOCK) WHERE OptNum = @OptNum AND StartDate >= '@From' AND EndDate <= '@To' ORDER BY EndDate DESC OFFSET @Page ROWS FETCH FIRST 50 ROWS ONLY; SELECT SUM(TotalUnrestricted)[Total Unrestricted Shares at Period Start],SUM(TransferLimit)[Total Individual Transfer Limit Shares],SUM(AdditionalShares)[Total Additional Shares Available Due to Transfer Limit Waiver],SUM(TotalSold)[Total Shares Sold/Transferred],SUM((TransferLimit + AdditionalShares) - (TotalSold)) [Net Shares Eligible for Sale/Transfer in Period] FROM dbo.FounderTransferLimit_VW WITH(NOLOCK) WHERE OptNum = @OptNum AND StartDate >= '@From' AND EndDate <= '@To' SELECT COUNT(*) [TotalRows] FROM dbo.FounderTransferLimit_VW WITH(NOLOCK) WHERE OptNum = @OptNum AND StartDate >= '@From' AND EndDate <= '@To'"     
        },

    "PurchaseProgRpt":{
        "VEIPPurchase":"SELECT [OptNum] [OPTNUM] ,[Program] [PROGRAM] ,[Purchase Date] [PURCHASE DATE] ,[Grant ID] [GRANT ID] ,[Contribution %] [CONTRIBUTION %], [Monthly Contribution Plus Prior Month's Carryover (Local)] [MONTHLY CONTRIBUTION PLUS PRIOR MONTH'S CARRYOVER (LOCAL)] ,[Exchange Rate] [EXCHANGE RATE] ,[Monthly Contribution Plus Prior Month's Carryover (USD)] [MONTHLY CONTRIBUTION PLUS PRIOR MONTH'S CARRYOVER (USD)] ,[Purchase Price FMV (USD)] [PURCHASE PRICE FMV (USD)] ,[Total Shares Purchased] [TOTAL SHARES PURCHASED] ,[Total Value of Shares Purchased (USD)] [TOTAL VALUE OF SHARES PURCHASED (USD)] ,[Total Value of Shares Purchased (Local)] [TOTAL VALUE OF SHARES PURCHASED (LOCAL)] ,[Contribution to be Carried Over/Refunded (USD)] [CONTRIBUTION TO BE CARRIED OVER/REFUNDED (USD)] ,[Contribution to be Carried Over/Refunded (Local)] [CONTRIBUTION TO BE CARRIED OVER/REFUNDED (LOCAL)] ,[Shares Disposed] [SHARES DISPOSED] ,[Shares Available] [SHARES AVAILABLE] ,[Broker for More Information] [BROKER FOR MORE INFORMATION] ,[LocalCurrencyCd] [LOCALCURRENCYCD]  FROM GetVeipPurchase_vw WITH (NOLOCK) WHERE OptNum = @OptNum AND [Purchase Date] BETWEEN CONVERT(DATETIME,@From) AND CONVERT(DATETIME,@To) ORDER BY YEAR([Purchase Date]) DESC, MONTH([Purchase Date]) DESC, DAY([Purchase Date]) DESC OFFSET @offset ROWS FETCH FIRST 50 ROWS ONLY SELECT SUM( [Contribution %]) [Total Contribution %] ,SUM([Monthly Contribution Plus Prior Month's Carryover (Local)]) [Total Monthly Contribution Plus Prior Month's Carryover (Local)] ,SUM([Exchange Rate]) [Total Exchange Rate] ,SUM([Monthly Contribution Plus Prior Month's Carryover (USD)]) [Total Monthly Contribution Plus Prior Month's Carryover (USD)] ,SUM([Purchase Price FMV (USD)]) [Total Purchase Price FMV (USD)] ,SUM([Total Shares Purchased]) [Total Shares Purchased] ,SUM([Total Value of Shares Purchased (USD)]) [Total Value of Shares Purchased (USD)] ,SUM([Total Value of Shares Purchased (Local)]) [Total Value of Shares Purchased (Local)] ,SUM([Contribution to be Carried Over/Refunded (USD)]) [Total Contribution to be Carried Over/Refunded (USD)] ,SUM([Contribution to be Carried Over/Refunded (Local)]) [Total Contribution to be Carried Over/Refunded (Local)] ,SUM([Shares Disposed]) [Total Shares Disposed] ,SUM([Shares Available]) [Total Shares Available] FROM GetVeipPurchase_vw WHERE OptNum = @OptNum AND [Purchase Date] BETWEEN CONVERT(DATETIME,@From) AND CONVERT(DATETIME,@To) SELECT COUNT(*) [TotalRows] FROM GetVeipPurchase_vw WITH (NOLOCK) WHERE OptNum = @OptNum AND [Purchase Date] BETWEEN CONVERT(DATETIME,@From) AND CONVERT(DATETIME,@To) ",
        "ESPPPurchase":"SELECT [OptNum] [OPTNUM] ,[PurchaseDt] [PURCHASEDT] ,[Program] [PROGRAM] ,[Offering Period] [OFFERING PERIOD] ,[Contribution %] [CONTRIBUTION %] ,[Total Contributions (Loc)] [TOTAL CONTRIBUTIONS (LOC)] ,[Exchange Rate] [EXCHANGE RATE] ,[Total Contributions (USD)] [TOTAL CONTRIBUTIONS (USD)] ,[Discounted Purchase Price (USD)] [DISCOUNTED PURCHASE PRICE (USD)] ,[Total Shares Purchased] [TOTAL SHARES PURCHASED] ,[FMV at Purchase (USD)] [FMV AT PURCHASE (USD)] ,[FMV Value of Shares Purchased (Cost Basis) (Loc)] [FMV VALUE OF SHARES PURCHASED (COST BASIS) (LOC)] ,[Value of Discount Received (Loc)] [VALUE OF DISCOUNT RECEIVED (LOC)] ,[Shares Sold for Tax Withholding] [SHARES SOLD FOR TAX WITHHOLDING] ,[Value of Shares Sold for Tax Withholding (Loc)] [VALUE OF SHARES SOLD FOR TAX WITHHOLDING (LOC)] ,[Fractional Shares Sold for Refund] [FRACTIONAL SHARES SOLD FOR REFUND] ,[Value of Fractional Shares Sold for Refund (Loc)] [VALUE OF FRACTIONAL SHARES SOLD FOR REFUND (LOC)] ,[Shares Sold/Disposed] [SHARES SOLD/DISPOSED] ,[Shares Available] [SHARES AVAILABLE] ,[Account] [ACCOUNT] ,[Broker for More Information] [BROKER FOR MORE INFORMATION] ,[LocalCurrencyCd] [LOCALCURRENCYCD] ,[Actual tax reported by Payroll (in Loc)] [ACTUAL TAX REPORTED BY PAYROLL (IN LOC)]  FROM GetEsppPurchase_vw WITH (NOLOCK) WHERE OptNum = @OptNum AND PurchaseDt BETWEEN CONVERT(DATETIME,@From) AND CONVERT(DATETIME,@To) ORDER BY YEAR(PurchaseDt) DESC, MONTH(PurchaseDt) DESC, DAY(PurchaseDt) DESC OFFSET @offset ROWS FETCH FIRST 50 ROWS ONLY SELECT SUM([Contribution %]) [Total Contribution %] ,SUM([Total Contributions (Loc)]) [Total Contributions (Loc)] ,SUM([Exchange Rate]) [Total Exchange Rate] ,SUM([Total Contributions (USD)]) [Total Contributions (USD)] ,SUM([Discounted Purchase Price (USD)]) [Total Discounted Purchase Price (USD)] ,SUM([Total Shares Purchased]) [Total Shares Purchased] ,SUM([FMV at Purchase (USD)]) [Total FMV at Purchase (USD)] ,SUM([FMV Value of Shares Purchased (Cost Basis) (Loc)]) [Total FMV Value of Shares Purchased (Cost Basis) (Loc)] ,SUM([Value of Discount Received (Loc)]) [Total Value of Discount Received (Loc)] ,SUM([Shares Sold for Tax Withholding]) [Total Shares Sold for Tax Withholding] ,SUM([Value of Shares Sold for Tax Withholding (Loc)]) [Total Value of Shares Sold for Tax Withholding (Loc)] ,SUM([Fractional Shares Sold for Refund]) [Total Fractional Shares Sold for Refund] ,SUM([Value of Fractional Shares Sold for Refund (Loc)]) [Total Value of Fractional Shares Sold for Refund (Loc)] ,SUM([Shares Sold/Disposed]) [Total Shares Sold/Disposed] ,SUM([Shares Available]) [Total Shares Available] ,SUM([Actual tax reported by Payroll (in Loc)]) [Total Actual tax reported by Payroll (in Loc)] FROM GetEsppPurchase_vw WHERE OptNum = @OptNum AND PurchaseDt BETWEEN CONVERT(DATETIME,@From) AND CONVERT(DATETIME,@To) SELECT COUNT(*) [TotalRows] FROM GetEsppPurchase_vw WITH (NOLOCK)  WHERE OptNum = @OptNum AND PurchaseDt BETWEEN CONVERT(DATETIME,@From) AND CONVERT(DATETIME,@To)",
        "purchProgDrpdwn":"SELECT ProgramNm FROM dbo.GetAllEnrollRpt_vw WITH(NOLOCK) where OptNum = @intOptNum GROUP BY ProgramNm",
        "pagination":" ORDER BY PurchaseDt DESC OFFSET @offset ROWS FETCH FIRST 50 ROWS ONLY; "
    },

    "salesHistRpt":{
        "getProgramDrpdwn":"SELECT  DISTINCT trv.OptNum,trv.HoldingsTypeId FROM dbo.TransactionReport_vw trv WHERE trv.OptNum = @intOptNum AND trv.HoldingsTypeId IN (1,2,3,4) UNION SELECT  DISTINCT veip.OptNum, CASE WHEN veip.HasVeip = 1 THEN 6 ELSE 0 END AS [HoldingsTypeId] FROM  [dbo].[HasVeip_vw] veip  WITH (NOLOCK) WHERE veip.OptNum = @intOptNum2 UNION SELECT  DISTINCT espp.OptNum, CASE WHEN espp.HasEspp = 1 THEN 5 ELSE 0 END AS [HoldingsTypeId] FROM  dbo.[HasEspp_vw] espp WITH (NOLOCK) WHERE espp.OptNum = @intOptNum3 " ,
        "getGrantDrpdwn1":"SELECT g.GrantLongDesc FROM [Grant] g WITH (NOLOCK) inner join GrantGroup gg WITH (NOLOCK) on g.GrantGroupId = gg.GrantGroupId WHERE g.OptNum = @intOptNum AND ISNULL(g.RootGrantNum,0) = 0 and gg.HoldingsTypeId = 1",
        "getGrantDrpdwn2":"SELECT g.GrantLongDesc FROM [Grant] g WITH (NOLOCK) inner join GrantGroup gg WITH (NOLOCK) on g.GrantGroupId = gg.GrantGroupId WHERE g.OptNum = @intOptNum AND ISNULL(g.RootGrantNum,0) = 0 and gg.HoldingsTypeId = 2",
        "getGrantDrpdwn3":"SELECT g.GrantLongDesc FROM [Grant] g WITH (NOLOCK) inner join GrantGroup gg WITH (NOLOCK) on g.GrantGroupId = gg.GrantGroupId WHERE g.OptNum = @intOptNum AND ISNULL(g.RootGrantNum,0) = 0 and gg.HoldingsTypeId = 3",
        "getGrantDrpdwn4":"SELECT g.GrantLongDesc FROM [Grant] g WITH (NOLOCK) inner join GrantGroup gg WITH (NOLOCK) on g.GrantGroupId = gg.GrantGroupId WHERE g.OptNum = @intOptNum AND ISNULL(g.RootGrantNum,0) = 0 and gg.HoldingsTypeId = 4 GROUP BY g.GrantLongDesc ",
        "SalesHistRpt":" SELECT trv.ProgramNm [Program],trv.AwardDetails [Award Details],CONVERT(VARCHAR,trv.TransactionDate,106)  [Transaction Date],trv.TransactionType [Transaction Type],trv.NumOfSharesTrans [Number of Shares in Transaction],trv.PricePerShareFmv [Purchase Date FMV per Share(USD)],trv.SalePrice [Sale Price (USD)],trv.GrossProceeds [Gross Proceeds (USD)],CONVERT(VARCHAR,trv.PurchaseDate,106) [Original Purchase Date],trv.PurchaseDateCostUsd [Purchase Date Value (USD)],trv.GainLossUsd [Gain/(Loss) - USD],trv.GainLossLoc [Gain/(Loss) - Local Currency],trv.ValuePerShareExerciseUsd [Value Per Share at Exercise (USD)],trv.TotalValueExerciseUsd [Total Value on Exercise Date (USD)],trv.TotalCostExerciseUsd [Total Cost on Exercise Date (USD)],trv.NetValueBeforeTaxesUsd [Taxable Income(USD)],trv.EstimatedTaxesWithheldExerciseUsd [Estimated Taxes Withheld at Exercise (USD)],trv.EstimatedProceedsUsd [Estimated Proceeds (USD)],CASE WHEN usr.IsBODInd = 'Y' THEN '' ELSE trv.BrokerNm END [Broker for More Information],trv.LocalCurrencyCd,trv.GrantNum,trv.GrantLongDesc,trv.OptNum,trv.HoldingsTypeId FROM TransactionReport_vw trv WITH(NOLOCK) INNER JOIN dbo.[User] usr WITH (NOLOCK) ON trv.OptNum = usr.OptNum WHERE trv.OptNum = @intOptNum AND (trv.TransactionDate BETWEEN @from AND @to) ",
        "pagination": " ORDER BY trv.TransactionDate DESC,trv.GrantNum ASC OFFSET @offset ROWS FETCH FIRST 50 ROWS ONLY; ",
        "getRowCount": " Select COUNT(*) AS [Total Rows] from dbo.TransactionReport_vw trv WITH (NOLOCK) WHERE trv.OptNum = @intOptNum AND (trv.TransactionDate BETWEEN @from AND @to) ",
        "getTotalSum":" SELECT SUM(trv.NumOfSharesTrans) [Total Number of Shares in Transaction],SUM(trv.SalePrice) [Total Sale Price (USD)],SUM(trv.GrossProceeds) [Total Gross Proceeds (USD)],SUM(trv.GainLossUsd) [Total Gain/(Loss) - USD],SUM(trv.GainLossLoc) [Total Gain/(Loss) - Local Currency],SUM(trv.ValuePerShareExerciseUsd) [Total ValuePerShareExerciseUsd],SUM(trv.TotalCostExerciseUsd) [Total CostExerciseUsd],SUM(trv.TotalCostExerciseUsd) [Total Cost on Exercise Date (USD)],SUM(trv.NetValueBeforeTaxesUsd) [Total Taxable Income(USD)],SUM(trv.EstimatedTaxesWithheldExerciseUsd) [Total Estimated Taxes Withheld at Exercise (USD)],SUM(trv.EstimatedProceedsUsd) [Total Estimated Proceeds (USD)] from dbo.TransactionReport_vw trv WITH (NOLOCK) WHERE trv.OptNum = @intOptNum AND (trv.TransactionDate BETWEEN @from AND @to)  "
    },

    "salesHistory":{
        "period1":"AND YEAR(TransactionDt) = YEAR(GETDATE()) ",
        "period2":"AND YEAR(TransactionDt) = YEAR(GETDATE()) - 1 ",
        "period3":"AND YEAR(TransactionDt) BETWEEN YEAR(GETDATE()) - 2 AND YEAR(GETDATE()) ",
        "period4":"",
        "period5":"AND TransactionDt >= CONVERT(DATETIME,'@dtmFrom') AND TransactionDt <= CONVERT(DATETIME,'@dtmTo') ",
        "GetTransfereeAccts_vw": "SELECT [OptNum],[AccountName] from dbo.GetTransfereeAccts_vw g WHERE g.GrantNum = @intGrantNum OR g.RootGrantNum =  @intGrantNum GROUP BY OptNum,AccountName ORDER BY [OptNum],[AccountName]",
        "GetTopTransfereeAcct_vw": "(SELECT top 1 [OptNum] from GetTransfereeAccts_vw g WITH (NOLOCK) WHERE g.GrantNum =  @intGrantNum OR g.RootGrantNum = @intGrantNum)",         
        "espp":"SELECT CONVERT(VARCHAR(12),TransactionDt,106) [Date],[Type],[Shares],[PriceUSD],[ProceedsUSD],[PurchaseValueUSD] FROM dbo.GetEsppDispositions_vw WITH(NOLOCK) WHERE OptNum = CONVERT(VARCHAR,@intOptNum) AND OfferNum = CONVERT(VARCHAR,@intOfferNum) @intPeriod ORDER BY [Date] DESC",
        "veip": "SELECT CONVERT(VARCHAR(12),TransactionDt,106) [Date],[Type], [Shares], [PriceUSD],[ProceedsUSD],[PurchaseValueUSD],[GainLossUSD],[GainLossLoc], [LocalCurrencyCd] from dbo.[GetVeipDisposition_vw] WITH(NOLOCK) where OptNum = @intOptNum AND OfferNum = @intOfferNum @intPeriod ORDER BY YEAR(TransactionDt) DESC,MONTH(TransactionDt) DESC, DAY(TransactionDt) DESC" ,
        "options":"SELECT CONVERT(VARCHAR(12),TransactionDt,106) [DispositionDate],[TransactionType],[ShareAmount],[PriceInUSD],[TotalValueInUSD],[CostInUSD],[PreTaxInUSD],[TaxesInUSD],[NetProceedsInUSD] FROM GetOptDispositions_vw WITH(NOLOCK) WHERE GrantNum = @intGrantNum @intPeriod ORDER BY YEAR(TransactionDt) DESC,MONTH(TransactionDt) DESC, DAY(TransactionDt) DESC",
        "founder": "SELECT g.[OptNum],g.[AccountName] from GetTransfereeAccts_vw g WITH (NOLOCK) WHERE g.GrantNum =  @intGrantNum OR g.RootGrantNum = @intGrantNum GROUP BY g.OptNum,g.AccountName ORDER BY g.[OptNum],g.[AccountName] SELECT tf.[TransactionDt], tf.[TransactionReason],tf.[Shares],tf.[TransactionPrice],tf.[ProceedsInUSD] from GetFdrDisposition_vw tf WITH (NOLOCK) where tf.OptNum = @intOptNum AND tf.GrantNum IN @intGrantNum_transferee AND [TransactionReason] @TransactionReason 'X Shares Redemption' @intPeriod ORDER BY YEAR(TransactionDt) DESC, MONTH(TransactionDt) DESC, DAY(TransactionDt) DESC ",
        "rsuIPO": "SELECT CONVERT(VARCHAR,TransactionDt,106) [DispositionDate],[TransactionType],CONVERT(INT,SharesQty) [ShareAmount],[PriceInUSD],[ProceedsInUSD],[ProceedsInLoc],[LocalCurrencyCd] FROM dbo.[GetRsuIpoDisposition_vw] WITH (NOLOCK) WHERE OptNum = @intOptNum @intPeriod ORDER BY TransactionDt, SharesQty DESC",
        "rsu": "SELECT CONVERT(VARCHAR(12),TransactionDt,106) [DispositionDate],[TransactionType], CONVERT(INT,SharesQty) [ShareAmount],CONVERT(DECIMAL(13,2),TransactionPrice) [PriceInUSD],CONVERT(DECIMAL(13,2),NetProceeds) [ProceedsInUSD],[ProceedsInLoc],[LocalCurrencyCd] FROM dbo.[GetRsuDisposition_vw] WITH(NOLOCK) WHERE (GrantNum = @intGrantNum OR RootGrantNum = @intGrantNum) @intPeriod ORDER BY TransactionDt DESC, SharesQty DESC",
        "GetTransfereeAccts_vw_Optnum":"(SELECT g.[GrantNum] from GetTransfereeAccts_vw g WITH (NOLOCK) WHERE g.RootGrantNum = ISNULL(@intGrantNum,'') OR g.GrantNum = @intGrantNum AND g.OptNum = @intOptNum)"
        
    },

    "OptNumEid":{
        "getData":"SELECT OptNum, EnterpriseId, IsAdminInd, CAST(AdminTypeInd AS VARCHAR) [AdminTypeInd], EmployeeStatusCd, JobCd FROM [User] WITH(NOLOCK) WHERE EnterpriseId = @eid  AND ISNULL(TransfereeTypeCd,'') = '' ",
        "getDataByOptNum":"SELECT EnterpriseId,IsAdminInd,JobCd,EmployeeStatusCd FROM [User] WITH(NOLOCK) WHERE OptNum = @intOptNum ",
        "getDataByEmail":"SELECT OptNum, EnterpriseId, IsAdminInd, CAST(AdminTypeInd AS VARCHAR) [AdminTypeInd] FROM [User] WITH(NOLOCK) WHERE EmailAddr = '@email'",
        "getDataByPersonnelNbr":"SELECT OptNum, EnterpriseId, IsAdminInd, CAST(AdminTypeInd AS VARCHAR) [AdminTypeInd] FROM [User] WITH(NOLOCK) WHERE PersonnelNbr = '@personnelnbr'",
        "getDataVEIP":"SELECT CASE WHEN EXISTS ( SELECT cd.VEIP_Eligibility_Flag, usr.OptNum FROM Tbl_CompanyCd_Param cd WITH(NOLOCK) INNER JOIN [User] usr WITH(NOLOCK) ON cd.CompanyCd = usr.CompanyCd WHERE ((Company_Descr like '%Avanade%' OR Company_Descr = 'Accenture Federal') OR usr.JobCd = '10000025') AND usr.OptNum = @intOptNum AND cd.VEIP_Eligibility_Flag = 'Y') THEN (SELECT cd.VEIP_Eligibility_Flag [VEIPEligible] FROM Tbl_CompanyCd_Param cd WITH(NOLOCK) INNER JOIN [User] usr WITH(NOLOCK) ON cd.CompanyCd = usr.CompanyCd WHERE ((Company_Descr like '%Avanade%' OR Company_Descr = 'Accenture Federal') OR usr.JobCd = '10000025') AND usr.OptNum = @intOptNum) WHEN EXISTS(SELECT 1 FROM Web_Tbl_VeipEligibility_Lkup WHERE OPT_NUM = @intOptNum) THEN (SELECT 'Y') ELSE (SELECT 'N') END [VEIPEligible]"
    },
   
   
    "ProgramSummPort":{
        "EidOptNum":" SELECT OptNum FROM [User] WHERE EnterpriseId = @Eid",
        "progSummRSU":" SELECT AwardNum [HoldingsTypeGroup] ,dbo.CodeDetailValue_fn(19,AwardNum) [ProgramName] ,SUM(Outstanding) [Outstanding] ,SUM(AvailableToSell) [AvailableToSell] ,SUM(UnreleasedUnexercisable) [UnreleasedUnvested] ,SUM(CASE WHEN GrantGroupId = 88 THEN Outstanding ELSE 0 END) [OutstandingPlc] ,SUM(CASE WHEN GrantGroupId <> 88 THEN Outstanding ELSE 0 END) [OutstandingSca] FROM dbo.ProgramSummary ps WITH (NOLOCK) WHERE OptNum = @intOptNum AND AwardNum = 15 AND RootGrantNum = 0 GROUP BY AwardNum SELECT ps.[GrantNum] ,ps.[HoldingsType] ,ps.[AwardNum] ,ps.[GrantGroupId] ,ps.[AwardName] ,ps.[Outstanding] ,ps.[AvailableToSell] ,ps.[BrokerId] ,CASE WHEN ps.[NextRelease] = '1900-01-01 00:00:00.000' THEN '' ELSE CONVERT(VARCHAR,ps.NextRelease,106) END [NextRelease] ,ps.[SharesReleasing] ,CASE WHEN HoldingsType = 4 THEN dbo.CodeDetailValue_fn(29,2) ELSE dbo.CodeDetailValue_fn(29,ISNULL(ga.GrantStatus,0)) END [GrantAccepted] ,ps.[UnreleasedUnexercisable] ,ps.[ReleasedExercisableQty] ,CASE WHEN ps.Expiration = '1900-01-01 00:00:00.000' THEN '' ELSE CONVERT(VARCHAR,ps.Expiration,106) END [Expiration] ,ps.[Forfeited] ,ISNULL(ga.[GrantAgreementTabVisibleInd],'N') [GrantAgreementTabVisibleInd],ps.GrantCountryCd [GrantCountryCd] ,CONVERT(DECIMAL(20,2),ps.SortOrder) [SortOrder] ,ps.[GrantLongDesc] ,ps.[PlanNum] ,CASE WHEN ps.RootGrantNum > 0 THEN 'Y' ELSE 'N' END [IsDivInd] ,YEAR(ps.GrantDt) [GrantYear] FROM dbo.ProgramSummary ps WITH (NOLOCK) LEFT JOIN dbo.GrantAgreeStatus ga WITH (NOLOCK) ON ps.GrantNum = ga.GrantNum WHERE ps.AwardNum = 15 AND ps.OptNum = @intOptNum ORDER BY ps.SortOrder ",
        "progSummOpt":" SELECT AwardNum [HoldingsTypeGroup] ,dbo.CodeDetailValue_fn(19,AwardNum) [ProgramName] ,SUM(Outstanding) [Outstanding] ,SUM(AvailableToSell) [AvailableToSell] ,SUM (UnreleasedUnexercisable)[UnreleasedUnvested] FROM dbo.ProgramSummary WITH (NOLOCK) WHERE AwardNum = 16 AND OptNum = @intOptNum GROUP BY AwardNum SELECT ps.[GrantNum] ,ps.[HoldingsType] ,ps.[AwardNum] ,ps.[GrantGroupId] ,ps.[AwardName] ,ps.[Outstanding] ,ps.[AvailableToSell] ,ps.[BrokerId] ,CASE WHEN ps.[NextRelease] = '1900-01-01 00:00:00.000' THEN '' ELSE CONVERT(VARCHAR,ps.NextRelease,106) END [NextRelease] ,REPLACE(ISNULL(ps.[SharesReleasing],''),0,'') [SharesReleasing] ,dbo.CodeDetailValue_fn(29,ISNULL(ga.GrantStatus,0))[GrantAccepted] ,ga.GrantStatus ,ps.[UnreleasedUnexercisable] ,ps.[ReleasedExercisableQty] ,CASE WHEN ps.Expiration = '1900-01-01 00:00:00.000' THEN '' ELSE CONVERT(VARCHAR,ps.Expiration,106) END [Expiration] ,ps.[Forfeited] ,ga.[GrantAgreementTabVisibleInd] ,ps.[GrantPrice] ,ps.GrantCountryCd [GrantCountryCd],CONVERT(DECIMAL(20,2),ps.SortOrder) [SortOrder] ,ps.[GrantLongDesc] FROM dbo.ProgramSummary ps WITH (NOLOCK) LEFT JOIN dbo.GrantAgreeStatus ga WITH (NOLOCK) ON ps.GrantNum = ga.GrantNum WHERE ps.AwardNum = 16 AND ps.OptNum = @intOptNum ORDER BY ps.SortOrder ",
        "progSummFdr":" SELECT AwardNum [HoldingsTypeGroup] ,dbo.CodeDetailValue_fn(19,AwardNum) [ProgramName] ,SUM(Outstanding) [Outstanding] ,SUM(AvailableToSell) [AvailableToSell] ,SUM(UnreleasedUnexercisable) [UnreleasedUnvested] ,SUM(CASE WHEN GrantGroupId = 88 THEN Outstanding ELSE 0 END) [OutstandingPlc] ,SUM(CASE WHEN GrantGroupId <> 88 THEN Outstanding ELSE 0 END) [OutstandingSca] FROM dbo.ProgramSummary WHERE optnum = @intOptNum AND AwardNum = 14 GROUP BY AwardNum SELECT ps.[GrantNum] ,ps.[HoldingsType] ,ps.[AwardNum] ,ps.[GrantGroupId] ,ps.[AwardName] ,ps.[Outstanding] ,ps.[AvailableToSell] ,[BrokerId] ,REPLACE(ISNULL(CONVERT(DATE, ps.[NextRelease]), ''), '1900-01-01', '') [NextRelease] ,REPLACE(ISNULL(ps.[SharesReleasing],''),0,'') [SharesReleasing] ,ISNULL(dbo.CodeDetailCdValue_fn(29,ga.GrantStatus),'-')[GrantAccepted] ,ps.[UnreleasedUnexercisable] ,ps.[ReleasedExercisableQty] ,REPLACE(ISNULL(CONVERT(DATE, ps.[Expiration]), ''), '1900-01-01', '') [Expiration] ,ps.[Forfeited] ,ps.[RedemptionMethod] ,ps.[CurrentAllowedTransaction] ,CONVERT(DECIMAL(20,2),ps.SortOrder + ((RANK() OVER (PARTITION BY ps.SortOrder ORDER BY ps.GrantDt DESC) - 1)* 0.01)) [SortOrder] ,ps.[GrantLongDesc] FROM dbo.ProgramSummary ps WITH (NOLOCK) LEFT JOIN dbo.GrantAgreeStatus ga WITH (NOLOCK) ON ps.GrantNum = ga.GrantNum WHERE ps.OptNum = @intOptNum AND AwardNum = 14 ",
        "progSummPur":" SELECT AwardNum [HoldingsTypeGroup] ,dbo.CodeDetailValue_fn(19,AwardNum) [ProgramName] ,SUM(Outstanding) [Outstanding] ,SUM(AvailableToSell) [AvailableToSell] ,0 [UnreleasedUnexercisable] FROM dbo.ProgramSummary ps WITH (NOLOCK) WHERE AwardNum = 17 AND OptNum = @intOptNum GROUP BY AwardNum SELECT [OfferNum] ,[HoldingsType] ,[AwardNum] ,[AwardName] ,[Outstanding] ,[AvailableToSell] ,[BrokerId] ,CASE WHEN ps.[NextRelease] = '1900-01-01 00:00:00.000' THEN '' ELSE CONVERT(VARCHAR,ps.NextRelease,106) END [NextRelease] ,[SharesReleasing] ,'-'[GrantAccepted] ,REPLACE(ISNULL(ps.[UnreleasedUnexercisable],''),0,'') [UnreleasedUnexercisable] ,[ReleasedExercisableQty] ,CASE WHEN ps.Expiration = '1900-01-01 00:00:00.000' THEN '' ELSE CONVERT(VARCHAR,ps.Expiration,106) END [Expiration] ,[Forfeited] ,CONVERT(DECIMAL(20,2),ps.SortOrder) [SortOrder] FROM dbo.ProgramSummary ps WITH (NOLOCK) WHERE ps.AwardNum = 17 AND ps.OptNum = @intOptNum ORDER BY SortOrder "
    },


    "grantAgreement":{
       
        "rsu":"SELECT GrantNum, PDFName, RsuGrantPrice, ExchangeRate, RsuSharesGranted, RsuTotalValue, OverallStatus, GrantId, PersonnelNbr, EmpName, RsuAward, RsuGrantDate, Step1AcceptanceStatus, Step1Text, Step2AcceptanceStatus, Step2Text, Step3ValStatus, Step3Text, Step1Status, Step2Status, Step3Status, MailAddVisible, FrenchQualifiedInd, GrantShortDesc, GrantLongDesc FROM dbo.GetRsuGrantAgreement_vw WITH(NOLOCK) WHERE GrantNum = @intGrantNum SELECT CONVERT(VARCHAR,VestReleaseDate,106) VestReleaseDate, OriginalShares, VestReleaseFlag FROM dbo.GetVestRelease_vw WITH(NOLOCK) WHERE GrantNum = @intGrantNum SELECT Message FROM GetEGTMessage_vw WITH(NOLOCK) WHERE GrantNum = @intGrantNum ",
        "options":"SELECT GrantNum, PDFName, OptGrantPrice, ExchangeRate, OptSharesGranted, OptTotalValue, OverallStatus, GrantId, OptAward, Step1AcceptanceStatus, Step1Text, Step2AcceptanceStatus, Step2Text, Step3ValStatus, Step3Text, Step1Status, Step2Status, Step3Status, MailAddVisible, GrantShortDesc, GrantLongDesc FROM dbo.GetOptGrantAgreement_vw WITH(NOLOCK) WHERE GrantNum = @intGrantNum SELECT CONVERT(VARCHAR,VestReleaseDate,106) VestReleaseDate, OriginalShares, VestReleaseFlag FROM dbo.GrantAgreementVest_vw WITH (NOLOCK) WHERE GrantNum = @intGrantNum2 SELECT Message FROM dbo.GrantAgreementNotes_vw WITH (NOLOCK) WHERE GrantNum = @intGrantNum3 ", 
        "PutGrantAgreementAccept":" DECLARE @intAcceptedOnline INT DECLARE @dtmAcceptedOnlineDate DATETIME = GETDATE() DECLARE @intAcceptedByOptNum INT = @intCurrentOptNum DECLARE @intSignedEGTStatus INT  DECLARE @dtmLastUpdatedDate DATETIME = GETDATE() DECLARE @intAlertId INT = 5 DECLARE @intActionRequired INT = 1 DECLARE @intSignedAgreementStatus INT DECLARE @chvGrantId VARCHAR(13) DECLARE @chvLastUpdatedBy VARCHAR(100) = @chvEnterpriseId SET @intAcceptedOnline = (SELECT Code FROM dbo.CodeDetail WHERE CategoryNbr = 8 AND Decode = 'Completed')  SET @chvGrantId = (SELECT GrantId FROM dbo.[Grant] WITH (NOLOCK) WHERE GrantNum = @intGrantNum)",
        "PutGrantAgreementAccept1":" UPDATE a SET AcceptedOnline = b.OldValue,AcceptedOnlineDate = @dtmAcceptedOnlineDate,AcceptedByOptNum = @intAcceptedByOptNum,AcceptedByEnterpriseID = @AcceptedByEnterpriseID,LastUpdatedBy = @chvLastUpdatedBy,LastUpdatedDate = @dtmLastUpdatedDate FROM  dbo.Web_Tbl_GrantTracking_Trans a INNER JOIN dbo.Mapping b ON b.NewValue =  @intAcceptedOnline WHERE a.GrantID = @chvGrantId AND b.Category = 'GrantAgreementStatus'",
        "PutGrantAgreementAccept2":" UPDATE gas SET gas.GrantStatus = gv.GrantStatus,gas.SignedAgreementStatus = gv.SignedAgreementStatus,gas.SignedEGTStatus = gv.SignedEGTStatus,gas.AcceptOnlineStatus = gv.AcceptOnlineStatus,gas.GrantAgreementTabVisibleInd = gv.GrantAgreementTabVisibleInd,gas.AcceptedOnlineDate = gv.AcceptedOnlineDate,gas.AcceptedByOptNum = gv.AcceptedByOptNum,gas.AcceptedByEnterpriseID = gv.AcceptedByEnterpriseID,gas.SignedAgreementReceivedDate = gv.SignedAgreementReceivedDate,gas.EGTReceivedDate = gv.EGTReceivedDate FROM dbo.GrantAgreeStatus gas JOIN GrantAgreeStatus_vw gv ON gas.GrantNum = gv.GrantNum WHERE gas.GrantID = @chvGrantID",
        "PutGrantAgreementAccept3":" SELECT @intSignedAgreementStatus = SignedAgreementStatus,@intSignedEGTStatus = SignedEGTStatus FROM dbo.GrantAgreeStatus WITH (NOLOCK) WHERE GrantNum = @intGrantNum1",
        "PutGrantAgreementAccept4":" IF (@intSignedAgreementStatus <> @intActionRequired AND @intSignedEGTStatus <> @intActionRequired) BEGIN DELETE FROM UserAlert WHERE OptNum = @intCurrentOptNum AND AlertId = @intAlertId AND AlertRelatedValue = @intGrantNum2 END IF @@Error = 0 BEGIN SELECT 0 END ELSE BEGIN SELECT 2 END",
        "rsuAccept":" DECLARE @intAcceptedOnline INT  DECLARE @dtmAcceptedOnlineDate DATETIME = GETDATE() DECLARE @intAcceptedByOptNum INT = @intCurrentOptNum  DECLARE @chvAcceptedByEnterpriseID VARCHAR(100) = @chvEnterpriseID DECLARE @chvLastUpdatedBy VARCHAR(100) = @chvEnterpriseID DECLARE @dtmLastUpdatedDate DATETIME = GETDATE() DECLARE @intSignedAgreementStatus INT DECLARE @intSignedEGTStatus INT DECLARE @chvGrantId VARCHAR(13) SET @intAcceptedOnline = (SELECT Code FROM dbo.CodeDetail WITH (NOLOCK) WHERE CategoryNbr = 8 AND Decode = 'Completed') SET @chvGrantId = (SELECT GrantId FROM dbo.[Grant] WITH (NOLOCK) WHERE GrantNum = @intGrantNum) UPDATE a SET AcceptedOnline = b.OldValue,AcceptedOnlineDate = @dtmAcceptedOnlineDate,AcceptedByOptNum = @intCurrentOptNum,AcceptedByEnterpriseID = @chvAcceptedByEnterpriseID,LastUpdatedBy = @chvEnterpriseID,LastUpdatedDate = @dtmLastUpdatedDate FROM  dbo.Web_Tbl_GrantTracking_Trans a INNER JOIN dbo.Mapping b ON b.NewValue =  @intAcceptedOnline WHERE a.GrantID = @chvGrantId AND b.Category = 'GrantAgreementStatus' UPDATE gas SET gas.GrantStatus = gv.GrantStatus,gas.SignedAgreementStatus = gv.SignedAgreementStatus,gas.SignedEGTStatus = gv.SignedEGTStatus,gas.AcceptOnlineStatus = gv.AcceptOnlineStatus,gas.GrantAgreementTabVisibleInd = gv.GrantAgreementTabVisibleInd,gas.AcceptedOnlineDate = gv.AcceptedOnlineDate,gas.AcceptedByOptNum = gv.AcceptedByOptNum,gas.AcceptedByEnterpriseID = gv.AcceptedByEnterpriseID,gas.SignedAgreementReceivedDate = gv.SignedAgreementReceivedDate,gas.EGTReceivedDate = gv.EGTReceivedDate FROM dbo.GrantAgreeStatus gas INNER JOIN GrantAgreeStatus_vw gv ON gas.GrantNum = gv.GrantNum WHERE gas.GrantID = @chvGrantID SELECT @intSignedAgreementStatus = SignedAgreementStatus,@intSignedEGTStatus = SignedEGTStatus FROM dbo.GrantAgreeStatus WITH (NOLOCK) WHERE GrantNum = @intGrantNum "       

    },

    "AwardCarryOverSum":{
        "GetAwardCarryOverSumVEIP":"DECLARE @intCyNum INT,@intEnrollmentStatusFl INT = 0,@intTransferredFl INT = 0,@intRecentOnholdFl INT = 0,@dtmLatestPurchase DATETIME,@chvFirstLocalCurrencyCd VARCHAR(100),@chvLatestLocalCurrencyCd VARCHAR(100) SELECT TOP 1 @dtmLatestPurchase = PurchaseDt,@chvFirstLocalCurrencyCd = LocalCurrencyCd FROM dbo.GetVeipPurchaseInfo_vw WITH (NOLOCK) WHERE OptNum = @intOptNum AND OfferNum = @intOfferNum ORDER BY PurchaseDt DESC IF (@dtmLatestPurchase = '@dtmPurchaseDt') BEGIN SET @intRecentOnholdFl = 1 END SET @intCyNum = (SELECT CyNum FROM dbo.Offering WITH (NOLOCK) WHERE OfferNum = @intOfferNum) SET @intEnrollmentStatusFl = ( SELECT TOP 1 CASE WHEN map.NewValue IN (6,7,8) THEN 1 ELSE 0 END FROM dbo.Web_Tbl_Veip_Trans tvt WITH (NOLOCK) INNER JOIN dbo.Mapping map WITH (NOLOCK) ON tvt.TRANS_TYPE = map.OldValue WHERE tvt.Opt_Num = @intOptNum AND tvt.Cy_Num = @intCyNum AND map.Category = 'VeipEnrollmentStatus' ORDER BY Trans_Num DESC)",
        "GetAwardCarryOverSumVEIP1":"SELECT [MonthlyContributionUSD],[MonthlyContributionLoc],[PriorMonthsCarryOverUSD],[PriorMonthsCarryOverLoc],[TotalContributionUSD],[TotalContributionLoc],[PurchaseCostUSD],[PurchaseCostLoc],[CarryOverToNextMonthUSD],[CarryOverToNextMonthLoc],[ExchangeRate],[LocalCurrencyCd],CASE WHEN ((@intEnrollmentStatusFl = 1 OR MONTH(PurchaseDt) = 1) AND @intRecentOnholdFl = 1) OR (@chvLatestLocalCurrencyCd <> LocalCurrencyCd) THEN 1 ELSE 0 END [IsDisplayRefund] FROM dbo.GetVeipPurchaseInfo_vw WITH(NOLOCK) WHERE OptNum = @intOptNum AND OfferNum = @intOfferNum AND PurchaseDt = '@dtmPurchaseDt'"
    },

    "Resource":{
        "CountryList":"SELECT DISTINCT tcp.Country_Code, UPPER(tcp.Country_name) AS [Country_Name] FROM dbo.Tbl_Country_Param_Temp tcp WITH(NOLOCK) INNER JOIN dbo.Tbl_CompanyCd_Param_Temp tccp WITH(NOLOCK) ON tcp.country_CODE = tccp.country_code WHERE tccp.ESPP_Eligibility_Flag = 'Y' OR tccp.RSU_Eligibility_Flag = 'Y' OR tccp.Option_Eligibility_Flag = 'Y' ORDER BY [Country_Name]",
        "CountryName":"SELECT ID, CountryCode, CountryName, FileDesc, FileType, SourceURL FROM dbo.CountryTaxUrlMapping WITH(NOLOCK) WHERE CountryName = '@countryname'",
        "ExchangeRateRpt": "SELECT CodeHeader.CategoryDesc, CodeDetail.Code, CodeDetail.Decode, CodeDetail.SequenceNbr, CodeDetail.StatusInd, CodeDetail.CategoryNbr FROM dbo.CodeHeader WITH(NOLOCK) INNER JOIN dbo.CodeDetail WITH(NOLOCK) On CodeHeader.CategoryNbr = CodeDetail.CategoryNbr WHERE CodeHeader.CategoryDesc = '@Category'",
        "ErrorLogs": "DECLARE @LogDate DATETIME SET @LogDate = GETDATE() INSERT INTO dbo.Tbl_ErrorLogs (EnterpriseId,WebPage,ErrorMessage,LogDate) VALUES('@intOptNum','@WebPage','@ErrorMessage',@LogDate) IF @@Error = 0 BEGIN SELECT 0 END ELSE BEGIN SELECT 2 END",
        "enrollVEIP":"SELECT [Date], PersonnelNbr [Personnel Number],LastNm [Last Name], FirstNm [First Name],EmployeeStatusDesc [Employment Status], ProgramNm [Purchase Program],PurchasePeriod [Purchase Period], [Status], ContributionPercent [Contribution Percent], MatchingGrant [Matching Grant] FROM GetVeipEnrollRpt_vw WITH(NOLOCK) Where OptNum = @OptNum AND Date BETWEEN CONVERT(DATETIME,'@From') AND CONVERT(DATETIME,'@To')",
        "enrollESPP":"SELECT [Date], PersonnelNbr [Personnel Number],LastNm [Last Name], FirstNm [First Name],EmployeeStatusDesc [Employment Status], ProgramNm [Purchase Program],PurchasePeriod [Purchase Period], [Status], ContributionPercent [Contribution Percent], MatchingGrant [Matching Grant] FROM GetEsppEnrollRpt_vw WITH(NOLOCK) Where OptNum = @OptNum AND Date BETWEEN CONVERT(DATETIME,'@From') AND CONVERT(DATETIME,'@To')",
        "enrollAll":"SELECT [Date], PersonnelNbr [Personnel Number],LastNm [Last Name], FirstNm [First Name],EmployeeStatusDesc [Employment Status], ProgramNm [Purchase Program],PurchasePeriod [Purchase Period], [Status], ContributionPercent [Contribution Percent], MatchingGrant [Matching Grant] FROM GetAllEnrollRpt_vw WITH(NOLOCK) Where OptNum = @OptNum AND Date BETWEEN CONVERT(DATETIME,'@From') AND CONVERT(DATETIME,'@To')",
        "VEIPPurchase":"SELECT [OptNum],[Program],[Purchase Date],[Grant ID],[Contribution %],[Monthly Contribution Plus Prior Month's Carryover (Local)],[Exchange Rate],[Monthly Contribution Plus Prior Month's Carryover (USD)],[Purchase Price FMV (USD)],[Total Shares Purchased],[Total Value of Shares Purchased (USD)],[Total Value of Shares Purchased (Local)],[Contribution to be Carried Over/Refunded (USD)],[Contribution to be Carried Over/Refunded (Local)],[Shares Disposed],[Shares Available],[Broker for More Information],[LocalCurrencyCd] FROM GetVeipPurchase_vw WITH (NOLOCK) WHERE OptNum = @OptNum AND [Purchase Date] BETWEEN CONVERT(DATETIME,@From) AND CONVERT(DATETIME,@To) ORDER BY YEAR([Purchase Date]) DESC, MONTH([Purchase Date]) DESC, DAY([Purchase Date]) DESC SELECT SUM( [Contribution %]) [Total Contribution %] ,SUM([Monthly Contribution Plus Prior Month's Carryover (Local)]) [Total Monthly Contribution Plus Prior Month's Carryover (Local)] ,SUM([Exchange Rate]) [Total Exchange Rate] ,SUM([Monthly Contribution Plus Prior Month's Carryover (USD)]) [Total Monthly Contribution Plus Prior Month's Carryover (USD)] ,SUM([Purchase Price FMV (USD)]) [Total Purchase Price FMV (USD)] ,SUM([Total Shares Purchased]) [Total Shares Purchased] ,SUM([Total Value of Shares Purchased (USD)]) [Total Value of Shares Purchased (USD)] ,SUM([Total Value of Shares Purchased (Local)]) [Total Value of Shares Purchased (Local)] ,SUM([Contribution to be Carried Over/Refunded (USD)]) [Total Contribution to be Carried Over/Refunded (USD)] ,SUM([Contribution to be Carried Over/Refunded (Local)]) [Total Contribution to be Carried Over/Refunded (Local)] ,SUM([Shares Disposed]) [Total Shares Disposed] ,SUM([Shares Available]) [Total Shares Available] FROM GetVeipPurchase_vw WHERE OptNum = @OptNum AND [Purchase Date] BETWEEN CONVERT(DATETIME,@From) AND CONVERT(DATETIME,@To) SELECT COUNT(*) [TotalRows] FROM GetVeipPurchase_vw WITH (NOLOCK) WHERE OptNum = @OptNum AND [Purchase Date] BETWEEN CONVERT(DATETIME,@From) AND CONVERT(DATETIME,@To) ",
        "ESPPPurchase":"SELECT [OptNum],[PurchaseDt],[Program],[Offering Period],[Contribution %],[Total Contributions (Loc)],[Exchange Rate],[Total Contributions (USD)],[Discounted Purchase Price (USD)],[Total Shares Purchased],[FMV at Purchase (USD)],[FMV Value of Shares Purchased (Cost Basis) (Loc)],[Value of Discount Received (Loc)],[Shares Sold for Tax Withholding],[Value of Shares Sold for Tax Withholding (Loc)],[Fractional Shares Sold for Refund],[Value of Fractional Shares Sold for Refund (Loc)],[Shares Sold/Disposed],[Shares Available],[Account],[Broker for More Information],[LocalCurrencyCd],[Actual tax reported by Payroll (in Loc)] FROM GetEsppPurchase_vw WITH (NOLOCK) WHERE OptNum = @OptNum AND PurchaseDt BETWEEN CONVERT(DATETIME,@From) AND CONVERT(DATETIME,@To) ORDER BY YEAR(PurchaseDt) DESC, MONTH(PurchaseDt) DESC, DAY(PurchaseDt) DESC SELECT SUM([Contribution %]) [Total Contribution %] ,SUM([Total Contributions (Loc)]) [Total Contributions (Loc)] ,SUM([Exchange Rate]) [Total Exchange Rate] ,SUM([Total Contributions (USD)]) [Total Contributions (USD)] ,SUM([Discounted Purchase Price (USD)]) [Total Discounted Purchase Price (USD)] ,SUM([Total Shares Purchased]) [Total Shares Purchased] ,SUM([FMV at Purchase (USD)]) [Total FMV at Purchase (USD)] ,SUM([FMV Value of Shares Purchased (Cost Basis) (Loc)]) [Total FMV Value of Shares Purchased (Cost Basis) (Loc)] ,SUM([Value of Discount Received (Loc)]) [Total Value of Discount Received (Loc)] ,SUM([Shares Sold for Tax Withholding]) [Total Shares Sold for Tax Withholding] ,SUM([Value of Shares Sold for Tax Withholding (Loc)]) [Total Value of Shares Sold for Tax Withholding (Loc)] ,SUM([Fractional Shares Sold for Refund]) [Total Fractional Shares Sold for Refund] ,SUM([Value of Fractional Shares Sold for Refund (Loc)]) [Total Value of Fractional Shares Sold for Refund (Loc)] ,SUM([Shares Sold/Disposed]) [Total Shares Sold/Disposed] ,SUM([Shares Available]) [Total Shares Available] ,SUM([Actual tax reported by Payroll (in Loc)]) [Total Actual tax reported by Payroll (in Loc)] FROM GetEsppPurchase_vw WHERE OptNum = @OptNum AND PurchaseDt BETWEEN CONVERT(DATETIME,@From) AND CONVERT(DATETIME,@To) SELECT COUNT(*) [TotalRows] FROM GetEsppPurchase_vw WITH (NOLOCK)  WHERE OptNum = @OptNum AND PurchaseDt BETWEEN CONVERT(DATETIME,@From) AND CONVERT(DATETIME,@To)",
        "getIndividualTransferLimitHist" : "SELECT 'Founders' AS [Program],ShareType AS [Share Type],CONVERT(varchar,StartDate,106) + ' - ' + CONVERT(varchar,EndDate,106) AS [Trading Window Period],TotalUnrestricted AS [Total Unrestricted Shares at Period Start],TransferLimitStatus AS [Individual Transfer Limit Status],PricingMethod AS [Estimated Sales Price in Effect],RedemptionMethod AS [Redemption Method],TransferLimit AS [Individual Transfer Limit Shares],AdditionalShares AS [Additional Shares Available Due to Transfer Limit Waiver],TotalSold AS [Total Shares Sold/Transferred],(TransferLimit + AdditionalShares) - (TotalSold) AS [Net Shares Eligible for Sale/Transfer in Period] FROM dbo.FounderTransferLimit_VW WITH(NOLOCK) WHERE OptNum = @OptNum AND StartDate >= '@From' AND EndDate <= '@To' ORDER BY EndDate DESC SELECT SUM(TotalUnrestricted)[Total Unrestricted Shares at Period Start],SUM(TransferLimit)[Total Individual Transfer Limit Shares],SUM(AdditionalShares)[Total Additional Shares Available Due to Transfer Limit Waiver],SUM(TotalSold)[Total Shares Sold/Transferred],SUM((TransferLimit + AdditionalShares) - (TotalSold)) [Net Shares Eligible for Sale/Transfer in Period] FROM dbo.FounderTransferLimit_VW WITH(NOLOCK) WHERE OptNum = @OptNum AND StartDate >= '@From' AND EndDate <= '@To' SELECT COUNT(*) [TotalRows] FROM dbo.FounderTransferLimit_VW WITH(NOLOCK) WHERE OptNum = @OptNum AND StartDate >= '@From' AND EndDate <= '@To'",
        "matchgranttooltip":"SELECT SUM(RemainingAtBrokerQty) [Total Veip Matching Grant Remaining] FROM VeipMatchingGrant vp INNER JOIN [Grant] gr ON vp.GrantNum = gr.GrantNum INNER JOIN dbo.ProgramSummary ps ON ps.OptNum = vp.OptNum AND ps.OfferNum = vp.OfferNum WHERE vp.OptNum = @intOptNum SELECT SUM([AvailableToSell]) [Total Veip Matching Grant Value] FROM dbo.ProgramSummary WHERE AwardNum = 17 AND OptNum = @intOptNum ",
        "shareprice":"SELECT CONVERT(VARCHAR,PRICE_DT,106)  AS [Date], HIGH_PRC AS [High (USD)], LOW_PRC AS [Low (USD)], CLOSE_PRC AS [Close (USD)], MARKET_PRC AS [Fair Market Value (USD)], VOLUME AS [Trading Volume] FROM dbo.PRICE WITH(NOLOCK) WHERE PRICE_DT >= @From AND PRICE_DT <= @To AND DATENAME(dw,PRICE_DT) NOT IN ('Saturday', 'Sunday')",
        "getdividendschart":"SELECT TOP 15 * FROM Tbl_Dividends_Chart ORDER BY FY DESC"
    },

    "Email":{
        "emailItems":" SELECT [Subject], [Body], [Footer], [To], [Action], [ProgramType] FROM [dbo].[Web_Tbl_EmailLkup] WITH(NOLOCK) WHERE [Action] = @action AND [ProgramType] = '@progtype' ",
        "getTo":" SELECT [To] FROM [dbo].[11993-WebEmailLkup-Tbl] WITH(NOLOCK) WHERE [Id] = @id ", 
        "insertEmail":" INSERT INTO [dbo].[Web_Tbl_EmailLog]([EmailFrom],[EmailTo],[EmailSubject],[EmailBody],[SendMailStatusInd],[CreateDttm],[UpdateDttm],[ErrorNbr], [ErrorDesc], [ProgramType], [TransNum]) VALUES('@notification','@eaddress,@notification', '@subject', '@body','NS',GETDATE(),NULL,NULL,NULL, '@progtype', '@transNum') IF @@Error = 0 BEGIN SELECT 0 END ELSE BEGIN SELECT 2 END"

   
    },

    "brokeraccounts":{
        "getBrokerAcct":"SELECT DISTINCT (CASE Broker WHEN 'SB' THEN 'MS' WHEN 'NCB' THEN 'TA' ELSE Broker END) AS Broker, Account FROM dbo.Web_Tbl_BrokerContacts WHERE Opt_Num = @OptNum"
   
    },

    "participantGlobalIDHistory":{
        "getPariticipantGlobalIDHistory":"SELECT Distinct Top 2 UserHistoryId,ParticipantNbr FROM dbo.UserGlobalIdHistory WHERE OptNum = @OptNum Order by UserHistoryId Desc"
       
    },

    "holdingprogsummary":{
        "options":"SELECT AwardNum [HoldingsTypeGroup] ,dbo.CodeDetailValue_fn(19,AwardNum) [ProgramName] ,SUM(Outstanding) [Outstanding] ,SUM(AvailableToSell) [AvailableToSell] ,SUM (UnreleasedUnexercisable)[UnreleasedUnvested] FROM dbo.ProgramSummary WITH (NOLOCK) WHERE AwardNum = 16 AND OptNum = @intOptNum GROUP BY AwardNum SELECT ps.[GrantNum] ,ps.[HoldingsType] ,ps.[AwardNum] ,ps.[GrantGroupId] ,ps.[AwardName] ,ps.[Outstanding] ,ps.[AvailableToSell] ,ps.[BrokerId] ,CASE WHEN ps.[NextRelease] = '1900-01-01 00:00:00.000' THEN '' ELSE CONVERT(VARCHAR,ps.NextRelease,106) END [NextRelease] ,ISNULL(ps.[SharesReleasing],0) [SharesReleasing] ,dbo.CodeDetailValue_fn(29,ISNULL(ga.GrantStatus,0))[GrantAccepted] ,ga.GrantStatus ,ps.[UnreleasedUnexercisable] ,ps.[ReleasedExercisableQty] ,CASE WHEN ps.Expiration = '1900-01-01 00:00:00.000' THEN '' ELSE CONVERT(VARCHAR,ps.Expiration,106) END [Expiration] ,ps.[Forfeited] ,ga.[GrantAgreementTabVisibleInd] ,ps.[GrantPrice] ,ps.GrantCountryCd [GrantCountryCd],CONVERT(DECIMAL(20,2),ps.SortOrder) [SortOrder] ,ps.[GrantLongDesc] FROM dbo.ProgramSummary ps WITH (NOLOCK) LEFT JOIN dbo.GrantAgreeStatus ga WITH (NOLOCK) ON ps.GrantNum = ga.GrantNum WHERE ps.AwardNum = 16 AND ps.OptNum = @intOptNum ORDER BY ps.SortOrder ",
        "purchase":"SELECT AwardNum [HoldingsTypeGroup] ,dbo.CodeDetailValue_fn(19,AwardNum) [ProgramName] ,SUM(Outstanding) [Outstanding] ,SUM(AvailableToSell) [AvailableToSell] ,0 [UnreleasedUnexercisable] FROM dbo.ProgramSummary ps WITH (NOLOCK) WHERE AwardNum = 17 AND OptNum = @intOptNum GROUP BY AwardNum SELECT [OfferNum] ,[HoldingsType] ,[AwardNum] ,[AwardName] ,[Outstanding] ,[AvailableToSell] ,[BrokerId] ,CASE WHEN ps.[NextRelease] = '1900-01-01 00:00:00.000' THEN '' ELSE CONVERT(VARCHAR,ps.NextRelease,106) END [NextRelease] ,[SharesReleasing] ,'-'[GrantAccepted] ,REPLACE(ISNULL(ps.[UnreleasedUnexercisable],''),0,'') [UnreleasedUnexercisable] ,[ReleasedExercisableQty] ,CASE WHEN ps.Expiration = '1900-01-01 00:00:00.000' THEN '' ELSE CONVERT(VARCHAR,ps.Expiration,106) END [Expiration] ,[Forfeited] ,CONVERT(DECIMAL(20,2),ps.SortOrder) [SortOrder] FROM dbo.ProgramSummary ps WITH (NOLOCK) WHERE ps.AwardNum = 17 AND ps.OptNum = @intOptNum ORDER BY SortOrder ",
        "rsu":"SELECT AwardNum [HoldingsTypeGroup] ,dbo.CodeDetailValue_fn(19,AwardNum) [ProgramName] ,SUM(Outstanding) [Outstanding] ,SUM(AvailableToSell) [AvailableToSell] ,SUM(UnreleasedUnexercisable) [UnreleasedUnvested] ,SUM(CASE WHEN GrantGroupId = 88 THEN Outstanding ELSE 0 END) [OutstandingPlc] ,SUM(CASE WHEN GrantGroupId <> 88 THEN Outstanding ELSE 0 END) [OutstandingSca] FROM dbo.ProgramSummary ps WITH (NOLOCK) WHERE OptNum = @intOptNum AND AwardNum = 15 AND RootGrantNum = 0 GROUP BY AwardNum SELECT ps.[GrantNum] ,ps.[HoldingsType] ,ps.[AwardNum] ,ps.[GrantGroupId] ,ps.[AwardName] ,ps.[Outstanding] ,ps.[AvailableToSell] ,ps.[BrokerId] ,CASE WHEN ps.[NextRelease] = '1900-01-01 00:00:00.000' THEN '' ELSE CONVERT(VARCHAR,ps.NextRelease,106) END [NextRelease] ,ps.[SharesReleasing] ,CASE WHEN HoldingsType = 4 THEN dbo.CodeDetailValue_fn(29,2) ELSE dbo.CodeDetailValue_fn(29,ISNULL(ga.GrantStatus,0)) END [GrantAccepted] ,ps.[UnreleasedUnexercisable] ,ps.[ReleasedExercisableQty] ,CASE WHEN ps.Expiration = '1900-01-01 00:00:00.000' THEN '' ELSE CONVERT(VARCHAR,ps.Expiration,106) END [Expiration] ,ps.[Forfeited] ,ISNULL(ga.[GrantAgreementTabVisibleInd],'N') [GrantAgreementTabVisibleInd],ps.GrantCountryCd [GrantCountryCd] ,CONVERT(DECIMAL(20,2),ps.SortOrder) [SortOrder] ,ps.[GrantLongDesc] ,ps.[PlanNum] ,CASE WHEN ps.RootGrantNum > 0 THEN 'Y' ELSE 'N' END [IsDivInd] ,YEAR(ps.GrantDt) [GrantYear] FROM dbo.ProgramSummary ps WITH (NOLOCK) LEFT JOIN dbo.GrantAgreeStatus ga WITH (NOLOCK) ON ps.GrantNum = ga.GrantNum WHERE ps.AwardNum = 15 AND ps.OptNum = @intOptNum ORDER BY ps.SortOrder",
        "fdr":"SELECT AwardNum [HoldingsTypeGroup] ,dbo.CodeDetailValue_fn(19,AwardNum) [ProgramName] ,SUM(Outstanding) [Outstanding] ,SUM(AvailableToSell) [AvailableToSell] ,SUM(UnreleasedUnexercisable) [UnreleasedUnvested] ,SUM(CASE WHEN GrantGroupId = 88 THEN Outstanding ELSE 0 END) [OutstandingPlc] ,SUM(CASE WHEN GrantGroupId <> 88 THEN Outstanding ELSE 0 END) [OutstandingSca] FROM dbo.ProgramSummary WHERE optnum = @intOptNum AND AwardNum = 14 GROUP BY AwardNum SELECT ps.[GrantNum] ,ps.[HoldingsType] ,ps.[AwardNum] ,ps.[GrantGroupId] ,ps.[AwardName] ,ps.[Outstanding] ,ps.[AvailableToSell] ,[BrokerId] ,REPLACE(ISNULL(CONVERT(DATE, ps.[NextRelease]), ''), '1900-01-01', '') [NextRelease] ,REPLACE(ISNULL(ps.[SharesReleasing],''),0,'') [SharesReleasing] ,ISNULL(dbo.CodeDetailCdValue_fn(29,ga.GrantStatus),'-')[GrantAccepted] ,ps.[UnreleasedUnexercisable] ,ps.[ReleasedExercisableQty] ,REPLACE(ISNULL(CONVERT(DATE, ps.[Expiration]), ''), '1900-01-01', '') [Expiration] ,ps.[Forfeited] ,ps.[RedemptionMethod] ,ps.[CurrentAllowedTransaction] ,CONVERT(DECIMAL(20,2),ps.SortOrder + ((RANK() OVER (PARTITION BY ps.SortOrder ORDER BY ps.GrantDt DESC) - 1)* 0.01)) [SortOrder] ,ps.[GrantLongDesc] FROM dbo.ProgramSummary ps WITH (NOLOCK) LEFT JOIN dbo.GrantAgreeStatus ga WITH (NOLOCK) ON ps.GrantNum = ga.GrantNum WHERE ps.OptNum = @intOptNum AND AwardNum = 14"
    },

    "KeyExecSummary":{
        "getKeyExecSummary":"DECLARE @intCurrentMonth INT,@intCurrentYear INT,@intStartYear INT,@chvCrossAwardDt VARCHAR(20) = '',@dtmDateNow  DATETIME,@dteExpirationDt DATE SET @dtmDateNow = GETDATE() SET @intCurrentYear = YEAR(@dtmDateNow) SET @intCurrentMonth = MONTH(@dtmDateNow) SET @chvCrossAwardDt = (SELECT ISNULL(cd.Decode,'') FROM dbo.CodeHeader ch WITH (NOLOCK) INNER JOIN dbo.CodeDetail cd WITH (NOLOCK) ON ch.CategoryNbr = cd.CategoryNbr WHERE ch.CategoryDesc = 'PsuCrossSummary' AND cd.Code = 'ExpirationDate') IF (@chvCrossAwardDt = '') OR (ISDATE(@chvCrossAwardDt) = 0) SET @intStartYear = @intCurrentYear ELSE BEGIN SET @dteExpirationDt = CONVERT(DATE,@chvCrossAwardDt) IF (@dtmDateNow <= @dteExpirationDt) BEGIN IF (@intCurrentMonth >= 9) SET @intStartYear = @intCurrentYear - 2 ELSE SET @intStartYear = @intCurrentYear - 3 END ELSE BEGIN IF (@intCurrentMonth >= 9) SET @intStartYear = @intCurrentYear - 1 ELSE SET @intStartYear = @intCurrentYear - 2 END END SELECT CareerLevel,SummaryAsOf,AwardYear,SummaryYear,TargetPercentOfTargetIncome,QtrOITargetInRSUs,TsrPercentileTarget,QtrTSRTargetinRSUs,QtrTotalTargetRSUs,PercentOfTargetIncome,QtrOIResultsInRSUs,QtrTSRPercentile,QtrTSRResultsInRSUs,QtrResultsInRSUs,ApproxPercentOfTarget,isSMD FROM [dbo].[GetPsuCrossAwardSummary_vw] WITH (NOLOCK) WHERE OptNum = @intOptNum AND SummaryYear >= @intStartYear AND DisplayInd = 'YES' ORDER BY SummaryYear DESC "
    },

    "admin":{
        "Search":"DECLARE @strPersonnelNbr VARCHAR(10), @strFName VARCHAR(150),@strLName VARCHAR(250),@strJobCd VARCHAR(10),@strExecJobCd VARCHAR(50), @intErr INT SET @strPersonnelNbr = @PersonnelNbr SET @strFName = @FName SET @strLName = @LName SET @strJobCd = @JobCd DECLARE @Tbl_User TABLE ([EnterpriseId] VARCHAR(50),[PersonnelNbr] VARCHAR(10) ,[LastNm] VARCHAR(200),[FirstNm] VARCHAR(100),[MiddleInitial] VARCHAR(5) ,[Location] VARCHAR(100),[Level] VARCHAR(20) ,[Status] VARCHAR(20) ,[OptNum] INT) SET @strExecJobCd = (SELECT GroupingValue FROM dbo.LogicalGroupingDetail WHERE GroupingId = 1) IF( LEN(@strPersonnelNbr) > 10 OR LEN(@strFName) > 100 OR LEN(@strLName) > 200 ) BEGIN SET @intErr = 1 END ELSE IF (LEN(@strPersonnelNbr) > 0) BEGIN INSERT INTO @Tbl_User( [EnterpriseId],[PersonnelNbr],[LastNm],[FirstNm],[MiddleInitial],[Location],[Level],[Status],[OptNum]) SELECT EnterpriseId ,PersonnelNbr ,LastNm ,FirstNm ,MiddleInitial ,CountryNm [Location] ,CASE WHEN EnterpriseId = ContractorEnterpriseId THEN 'Contractor' WHEN JobCd = @strExecJobCd THEN 'Senior Executive' ELSE 'Employee' END [Level] ,EmployeeStatusDesc [Status] ,OptNum FROM dbo.[User] WITH (NOLOCK) WHERE PersonnelNbr = @strPersonnelNbr ORDER BY SearchableLastNm END ELSE IF (@strJobCd = '3') BEGIN INSERT INTO @Tbl_User( [EnterpriseId] ,[PersonnelNbr] ,[LastNm] ,[FirstNm] ,[MiddleInitial] ,[Location] ,[Level] ,[Status] ,[OptNum]) SELECT EnterpriseId ,PersonnelNbr ,LastNm ,FirstNm ,MiddleInitial ,CountryNm [Location] ,CASE WHEN EnterpriseId = ContractorEnterpriseId THEN 'Contractor' WHEN JobCd = @strExecJobCd THEN 'Senior Executive' ELSE 'Employee' END [Level] ,EmployeeStatusDesc [Status] ,OptNum FROM dbo.[User] WITH (NOLOCK) WHERE SearchableFirstNm LIKE ISNULL(@strFName,'') + '%' AND SearchableLastNm LIKE ISNULL(@strLName,'') + '%' AND JobCd = @strExecJobCd AND EmployeeStatusDesc IS NOT NULL ORDER BY SearchableLastNm END ELSE IF (@strJobCd = '1') BEGIN INSERT INTO @Tbl_User([EnterpriseId],[PersonnelNbr],[LastNm],[FirstNm],[MiddleInitial],[Location],[Level],[Status],[OptNum]) SELECT EnterpriseId ,PersonnelNbr ,LastNm ,FirstNm ,MiddleInitial ,CountryNm [Location] ,CASE WHEN EnterpriseId = ContractorEnterpriseId THEN 'Contractor' WHEN JobCd = @strExecJobCd THEN 'Senior Executive' ELSE 'Employee' END [Level] ,EmployeeStatusDesc [Status] ,OptNum FROM dbo.[User] WITH (NOLOCK) WHERE SearchableFirstNm LIKE ISNULL(@strFName,'') + '%' AND SearchableLastNm LIKE ISNULL(@strLName,'') + '%' AND EmployeeStatusDesc IS NOT NULL ORDER BY SearchableLastNm END ELSE IF (@strJobCd = '2') BEGIN INSERT INTO @Tbl_User([EnterpriseId],[PersonnelNbr],[LastNm],[FirstNm],[MiddleInitial],[Location],[Level],[Status],[OptNum]) SELECT EnterpriseId ,PersonnelNbr ,LastNm ,FirstNm ,MiddleInitial ,CountryNm [Location] ,CASE WHEN EnterpriseId = ContractorEnterpriseId THEN 'Contractor' WHEN JobCd = @strExecJobCd THEN 'Senior Executive' ELSE 'Employee' END [Level] ,EmployeeStatusDesc [Status] ,OptNum FROM dbo.[User] WITH (NOLOCK) WHERE SearchableFirstNm LIKE ISNULL(@strFName,'') + '%' AND SearchableLastNm LIKE ISNULL(@strLName,'') + '%' AND JobCd <> @strExecJobCd AND EmployeeStatusDesc IS NOT NULL ORDER BY SearchableLastNm END IF @intErr = 1 BEGIN SELECT 'Your search reached maximum allowed characters.' END ELSE IF EXISTS (SELECT TOP 1 OptNum FROM @Tbl_User) BEGIN SELECT [EnterpriseId] ,[PersonnelNbr] ,[LastNm] ,[FirstNm] ,[MiddleInitial] ,[Location] ,[Level] ,[Status] ,[OptNum] FROM @Tbl_User END ELSE SELECT 'Your search did not match any participants.' "

    },
    "portal":{
        "progSumm": "select sum(Outstanding)[Outstanding], sum(AvailableToSell)[RemainingValue], CurrencyCd from dbo.ProgramSummary ps WITH (NOLOCK) inner join [dbo].[UserProfileByOptNum_vw] u WITH (NOLOCK) on u.OptNum = ps.OptNum WHERE AwardNum in(14,15,16,17) AND ps.OptNum = @intOptNum group by CurrencyCd"
    },
    "getGrantNum": {
        "grants": "SELECT g.GrantNum FROM [Grant] g WITH (NOLOCK) inner join GrantGroup gg WITH (NOLOCK) on g.GrantGroupId = gg.GrantGroupId WHERE g.OptNum = @intOptNum AND ISNULL(g.RootGrantNum,0) = 0"
    },
    "getTransfereeOptNum": {
        "transfereeOptNum": "SELECT g.OptNum FROM [dbo].[GetTransfereeAccts_vw] t WITH (NOLOCK) inner join [dbo].[Grant] g WITH (NOLOCK) on t.RootGrantNum = g.GrantNum WHERE t.GrantNum = @intGrantNum"
    },
    "getUsers": {
        "getUserRoles": "SELECT [AIR ID], EnterpriseID, PeopleKey, PersonnelNbr, Entitlement FROM GetUserRoles_vw WHERE Entitlement <> '' ORDER BY EnterpriseID, Entitlement ASC"
    }
}
   



